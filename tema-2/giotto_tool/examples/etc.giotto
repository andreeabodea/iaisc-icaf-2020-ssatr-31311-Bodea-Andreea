/* An Electronic Throttle Controller (ETC)

Copyright (c) 2004 The Regents of the University of California.
All rights reserved.

Permission is hereby granted, without written agreement and without
license or royalty fees, to use, copy, modify, and distribute this
software and its documentation for any purpose, provided that the above
copyright notice and the following two paragraphs appear in all copies
of this software.

IN NO EVENT SHALL THE UNIVERSITY OF CALIFORNIA BE LIABLE TO ANY PARTY
FOR DIRECT, INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES
ARISING OUT OF THE USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN IF
THE UNIVERSITY OF CALIFORNIA HAS BEEN ADVISED OF THE POSSIBILITY OF
SUCH DAMAGE.

THE UNIVERSITY OF CALIFORNIA SPECIFICALLY DISCLAIMS ANY WARRANTIES,
INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE SOFTWARE
PROVIDED HEREUNDER IS ON AN "AS IS" BASIS, AND THE UNIVERSITY OF
CALIFORNIA HAS NO OBLIGATION TO PROVIDE MAINTENANCE, SUPPORT, UPDATES,
ENHANCEMENTS, OR MODIFICATIONS.
*/

//////////////////////////////////////////////////////////////////////////
//// ETC: etc.giotto
/**

@author Christoph Kirsch
@version etc.giotto,v 1.2 2004/08/09 22:32:54 msanvido Exp
@since Giotto 1.0.1
*/

sensor
  COMPOSITE_SENSOR composite_sensor uses composite_sensor_device_driver;
actuator
  THROTTLE_MOTOR throttle_motor uses throttle_motor_device_driver;
output
  MANAGER_OUTPUT manager_output := init_manager_output;
  SERVO_CONTROL_OUTPUT servo_control_output := init_servo_control_output;
  MONITOR_OUTPUT monitor_output := init_monitor_output;
task manager_task (MANAGER_INPUT input)
        output (manager_output)
        state (MANAGER_PARAM param := init_manager_param)
{
        schedule manager_task(input, manager_output, param)
}
task servo_control_task (SERVO_CONTROL_INPUT input)
        output (servo_control_output)
        state (SERVO_CONTROL_PARAM param := init_servo_control_param)
{
        schedule servo_control_task(input, servo_control_output, param)
}
task monitor_task (MONITOR_INPUT input)
        output (monitor_output)
        state (MONITOR_PARAM param := init_monitor_param)
{
        schedule monitor_task(input, monitor_output, param)
}
driver manager_driver (monitor_output, composite_sensor)
        output (MANAGER_INPUT input)
{
  if c_true() then manager_input_driver( monitor_output, composite_sensor, input)
}
driver servo_control_driver (manager_output, composite_sensor)
        output (SERVO_CONTROL_INPUT input)
{
  if c_true() then servo_control_input_driver( manager_output, composite_sensor, input)
}
driver monitor_driver (servo_control_output, manager_output, composite_sensor)
        output (MONITOR_INPUT input)
{
  if c_true() then monitor_input_driver( servo_control_output, manager_output, composite_sensor, input)
}
driver throttle_motor_driver (servo_control_output)
        output (THROTTLE_MOTOR throttle_motor_output)
{
  if c_true() then throttle_motor_input_driver( servo_control_output, throttle_motor_output)
}
start real_time_controller {
  mode real_time_controller () period 100 {
    actfreq 10 do throttle_motor (throttle_motor_driver);
    taskfreq 2 do manager_task(manager_driver);
    taskfreq 10 do servo_control_task(servo_control_driver);
    taskfreq 1 do monitor_task(monitor_driver);
  }
}
