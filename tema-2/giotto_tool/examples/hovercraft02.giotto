/* A simple giotto program controlling a 2DOF hovercraft.

Copyright (c) 2004 The Regents of the University of California.
All rights reserved.

Permission is hereby granted, without written agreement and without
license or royalty fees, to use, copy, modify, and distribute this
software and its documentation for any purpose, provided that the above
copyright notice and the following two paragraphs appear in all copies
of this software.

IN NO EVENT SHALL THE UNIVERSITY OF CALIFORNIA BE LIABLE TO ANY PARTY
FOR DIRECT, INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES
ARISING OUT OF THE USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN IF
THE UNIVERSITY OF CALIFORNIA HAS BEEN ADVISED OF THE POSSIBILITY OF
SUCH DAMAGE.

THE UNIVERSITY OF CALIFORNIA SPECIFICALLY DISCLAIMS ANY WARRANTIES,
INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE SOFTWARE
PROVIDED HEREUNDER IS ON AN "AS IS" BASIS, AND THE UNIVERSITY OF
CALIFORNIA HAS NO OBLIGATION TO PROVIDE MAINTENANCE, SUPPORT, UPDATES,
ENHANCEMENTS, OR MODIFICATIONS.
*/

//////////////////////////////////////////////////////////////////////////
//// Hovercraft Example: hovercraft02.giotto
/**
A basic Giotto program for controlling a 2 degree of freedom hovercraft
simulator.

@author M.A.A. Sanvido
@version hovercraft02.giotto,v 1.5 2004/09/28 23:04:32 cxh Exp
@since Giotto 1.0.1
*/

/////////////////////////////////////////////////////////////////////////
////                         actuators                               ////

actuator
    real_port     rightJet uses PutRightJet;
    real_port     leftJet  uses PutLeftJet;

/////////////////////////////////////////////////////////////////////////
////                        output ports                             ////

output
    real_port     turn            := real_zero;
    real_port     thrust          := real_zero;

    /* this is a pseudo port used to notify the hovercraft simulator
       to open the windows with the simulator.
    */
    bool_port     window                := HovercraftWindow;

/////////////////////////////////////////////////////////////////////////
////                         tasks                                   ////

/** Reset the 'turn' and 'thrust' to 0.
 */
task idleTask() output (turn, thrust) state () {
    schedule Idle(turn, thrust)
}

/////////////////////////////////////////////////////////////////////////
////                    actuator drivers                             ////


driver leftMotor(turn, thrust) output (real_port left) {
    if constant_true() then dummy()
}

driver rightMotor(turn, thrust) output (real_port right) {
    if constant_true() then dummy()
}



start idle {

    /////////////////////////////////////////////////////////////////////
    ////                     mode idle                               ////

    mode idle() period 1000 {
        actfreq 1 do leftJet(leftMotor);
        actfreq 1 do rightJet(rightMotor);
        taskfreq 1 do idleTask();
    }

}
