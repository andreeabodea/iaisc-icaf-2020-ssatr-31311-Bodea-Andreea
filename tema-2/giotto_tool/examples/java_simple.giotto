/* An simple giotto program with java functionality

Copyright (c) 2004 The Regents of the University of California.
All rights reserved.

Permission is hereby granted, without written agreement and without
license or royalty fees, to use, copy, modify, and distribute this
software and its documentation for any purpose, provided that the above
copyright notice and the following two paragraphs appear in all copies
of this software.

IN NO EVENT SHALL THE UNIVERSITY OF CALIFORNIA BE LIABLE TO ANY PARTY
FOR DIRECT, INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES
ARISING OUT OF THE USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN IF
THE UNIVERSITY OF CALIFORNIA HAS BEEN ADVISED OF THE POSSIBILITY OF
SUCH DAMAGE.

THE UNIVERSITY OF CALIFORNIA SPECIFICALLY DISCLAIMS ANY WARRANTIES,
INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE SOFTWARE
PROVIDED HEREUNDER IS ON AN "AS IS" BASIS, AND THE UNIVERSITY OF
CALIFORNIA HAS NO OBLIGATION TO PROVIDE MAINTENANCE, SUPPORT, UPDATES,
ENHANCEMENTS, OR MODIFICATIONS.
*/

//////////////////////////////////////////////////////////////////////////
//// java_simple: etc.giotto
/**

@author M.A.A. Sanvido
@version java_simple.giotto,v 1.6 2004/09/28 22:53:15 cxh Exp
@since Giotto 1.0.1
*/

[ host HeliControl address 128.32.38.76:41254;
  host HeliControl2 address 128.32.38.76:41255;
  host HeliControl4 address 128.32.38.76:41256;
  host HeliControl8 address 128.32.38.76:41257;
  host HeliNavigation address 128.32.38.76:41258]

sensor

bool_port key_sensor uses key_sensor_driver [ host HeliNavigation ];

output

int_port control_output  := int_zero;
int_port control_output2 := int_zero;
int_port control_output4 := int_zero;
int_port control_output8 := int_zero;


task control() output (control_output) state () {
  schedule control_task(control_output)
} task control2() output (control_output2) state () {
  schedule control_task2(control_output2)
} task control4() output (control_output4) state () {
  schedule control_task4(control_output4)
} task control8() output (control_output8) state () {
  schedule control_task8(control_output8)
}

driver control_driver() output () {
  if constant_true() then control_driver_code()
}

driver key_press(key_sensor) output () {
  if key_pressed(key_sensor) then dummy()
}

// Mode declarations

start normal1 {

  mode normal1() period 8000 {
    [ host HeliNavigation; push (key_sensor) ]
    exitfreq 1 do normal2(key_press);

    taskfreq 1 do control8() [ host HeliControl8; push (control_output8) ];
    taskfreq 2 do control4() [ host HeliControl4; push (control_output4) ];
    taskfreq 4 do control2() [ host HeliControl2; push (control_output2) ];
    taskfreq 8 do control(control_driver) [ host HeliControl; push (control_output) ];
  }

  mode normal2() period 4000 {
    [ host HeliNavigation; push (key_sensor) ]
    exitfreq 1 do normal1(key_press);

    taskfreq 1 do control8() [ host HeliControl8; push (control_output8) ];
    taskfreq 2 do control4() [ host HeliControl4; push (control_output4) ];
  }


}
