/* An autopilot for an unmanned RC helicopter

Copyright (c) 2004 The Regents of the University of California.
All rights reserved.

Permission is hereby granted, without written agreement and without
license or royalty fees, to use, copy, modify, and distribute this
software and its documentation for any purpose, provided that the above
copyright notice and the following two paragraphs appear in all copies
of this software.

IN NO EVENT SHALL THE UNIVERSITY OF CALIFORNIA BE LIABLE TO ANY PARTY
FOR DIRECT, INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES
ARISING OUT OF THE USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN IF
THE UNIVERSITY OF CALIFORNIA HAS BEEN ADVISED OF THE POSSIBILITY OF
SUCH DAMAGE.

THE UNIVERSITY OF CALIFORNIA SPECIFICALLY DISCLAIMS ANY WARRANTIES,
INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE SOFTWARE
PROVIDED HEREUNDER IS ON AN "AS IS" BASIS, AND THE UNIVERSITY OF
CALIFORNIA HAS NO OBLIGATION TO PROVIDE MAINTENANCE, SUPPORT, UPDATES,
ENHANCEMENTS, OR MODIFICATIONS.
*/

//////////////////////////////////////////////////////////////////////////
//// heli.giotto
/**

@author Christoph Kirsch
@version heli.giotto,v 1.3 2004/09/28 22:53:03 cxh Exp
@since Giotto 1.0.1
*/

sensor
  GPSPort     gps uses            GPSGet;
  LaserPort   laser uses          LaserGet;
  CompassPort compass uses        CompassGet;
  RPMPort     rpm uses            RotorGet;
  ServoPort   pilot uses          ServoGet;
  AnalogPort  accelerometers uses AccGet;
  AnalogPort  gyroscopes uses     GyrosGet;
  AnalogPort  temperature uses    TempGet;
  BoolPort    startswitch uses    StartSwitchGet;
  BoolPort    stopswitch uses     StopSwitchGet;

actuator
  ServoPort    servos   uses ServoPut;
  DataPoolPort datapool uses DataPoolPut;

output
  AnalogPort   filter  :=  FilterInit;
  ServoPort    control :=  ServoInit;
  DataPoolPort data    :=  DataPoolInit;

task ADFilter(AnalogPort in_acc, AnalogPort in_gyros, AnalogPort in_temp, AnalogPort in_filter) output (filter) state () {
  schedule ADFilterImplementation(in_acc, in_gyros, in_temp, in_filter, filter)}

task NavPilot(GPSPort in_gps, LaserPort in_laser, CompassPort in_compass, AnalogPort in_filter, RPMPort in_rpm, ServoPort in_pilot, DataPoolPort in_data) output (control, data) state () {
  schedule NavPilotImplementation(in_gps, in_laser, in_compass, in_filter, in_rpm, in_pilot, control, data)}

task NavControl(GPSPort in_gps, LaserPort in_laser, CompassPort in_compass, AnalogPort in_filter, RPMPort in_rpm, ServoPort in_pilot, DataPoolPort in_data) output (control, data) state () {
  schedule NavControlImplementation(in_gps, in_laser, in_compass, in_filter, in_rpm, in_pilot, control, data)}

driver SwitchControlOff(stopswitch) output () {
  if isControlOff(stopswitch) then switch() }

driver SwitchControlOn(startswitch) output () {
  if isControlOn(startswitch) then switch() }

driver NavRead(gps, laser, compass, filter, rpm, pilot, data) output (GPSPort in_gps, LaserPort in_laser, CompassPort in_compass, AnalogPort in_filter, RPMPort in_rpm, ServoPort in_pilot, DataPoolPort in_data) {
  if always() then NavReadImplementation(gps, laser, compass, filter, rpm, pilot, data, in_gps, in_laser, in_compass, in_filter, in_rpm, in_pilot, in_data)}

driver ADFilterRead(accelerometers, gyroscopes, temperature, filter) output (AnalogPort in_acc, AnalogPort in_gyros, AnalogPort in_temp, AnalogPort in_filter) {
  if always() then ADFilterImplementation(accelerometers, gyroscopes, temperature, filter, in_acc, in_gyros, in_temp, in_filter)}

driver ServoUpdate(control) output (ServoPort in_servos) {
  if always() then ServoUpdateImplementation(control, in_servos)}

driver DataPoolUpdate(data) output (DataPoolPort in_datapool) {
  if always() then DataPoolUpdateImplementation(data, in_datapool)}

start ControlOff {

mode ControlOff() period 25 {
  actfreq  1 do servos(ServoUpdate);
  actfreq  1 do datapool(DataPoolUpdate);
  exitfreq 1 do ControlOn(SwitchControlOn);
  taskfreq 5 do ADFilter(ADFilterRead);
  taskfreq 1 do NavPilot(NavRead);}
mode ControlOn() period 25 {
  actfreq  1 do servos(ServoUpdate);
  actfreq  1 do datapool(DataPoolUpdate);
  exitfreq 1 do ControlOff(SwitchControlOff);
  taskfreq 5 do ADFilter(ADFilterRead);
  taskfreq 1 do NavControl(NavRead);}
}
