/* This file was generated by SableCC (http://www.sablecc.org/). */

package giotto.giottoc.node;

import giotto.giottoc.analysis.Analysis;

public final class APriorityTail extends PPriorityTail
{
    private TGreaterThan _greaterThan_;
    private PPriorityProd _priorityProd_;

    public APriorityTail()
    {
    }

    public APriorityTail(
        TGreaterThan _greaterThan_,
        PPriorityProd _priorityProd_)
    {
        setGreaterThan(_greaterThan_);

        setPriorityProd(_priorityProd_);

    }
    public Object clone()
    {
        return new APriorityTail(
            (TGreaterThan) cloneNode(_greaterThan_),
            (PPriorityProd) cloneNode(_priorityProd_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAPriorityTail(this);
    }

    public TGreaterThan getGreaterThan()
    {
        return _greaterThan_;
    }

    public void setGreaterThan(TGreaterThan node)
    {
        if (_greaterThan_ != null)
        {
            _greaterThan_.parent(null);
        }

        if (node != null)
        {
            if (node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _greaterThan_ = node;
    }

    public PPriorityProd getPriorityProd()
    {
        return _priorityProd_;
    }

    public void setPriorityProd(PPriorityProd node)
    {
        if (_priorityProd_ != null)
        {
            _priorityProd_.parent(null);
        }

        if (node != null)
        {
            if (node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _priorityProd_ = node;
    }

    public String toString()
    {
        return ""
            + toString(_greaterThan_)
            + toString(_priorityProd_);
    }

    void removeChild(Node child)
    {
        if (_greaterThan_ == child)
        {
            _greaterThan_ = null;
            return;
        }

        if (_priorityProd_ == child)
        {
            _priorityProd_ = null;
            return;
        }

    }

    void replaceChild(Node oldChild, Node newChild)
    {
        if (_greaterThan_ == oldChild)
        {
            setGreaterThan((TGreaterThan) newChild);
            return;
        }

        if (_priorityProd_ == oldChild)
        {
            setPriorityProd((PPriorityProd) newChild);
            return;
        }

    }
}
