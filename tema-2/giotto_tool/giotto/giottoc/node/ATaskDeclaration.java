/* This file was generated by SableCC (http://www.sablecc.org/). */

package giotto.giottoc.node;

import giotto.giottoc.analysis.Analysis;

public final class ATaskDeclaration extends PTaskDeclaration
{
    private TTask _task_;
    private TIdent _taskName_;
    private PFormalPorts _inputPorts_;
    private TOutput _output_;
    private PActualPorts _outputPorts_;
    private TState _state_;
    private PStatePorts _statePorts_;
    private PTaskWcetAnnotation _taskWcetAnnotation_;
    private TLBrace _lBrace_;
    private PScheduleTask _scheduleTask_;
    private PTaskTimingAnnotation _taskTimingAnnotation_;
    private TRBrace _rBrace_;

    public ATaskDeclaration()
    {
    }

    public ATaskDeclaration(
        TTask _task_,
        TIdent _taskName_,
        PFormalPorts _inputPorts_,
        TOutput _output_,
        PActualPorts _outputPorts_,
        TState _state_,
        PStatePorts _statePorts_,
        PTaskWcetAnnotation _taskWcetAnnotation_,
        TLBrace _lBrace_,
        PScheduleTask _scheduleTask_,
        PTaskTimingAnnotation _taskTimingAnnotation_,
        TRBrace _rBrace_)
    {
        setTask(_task_);

        setTaskName(_taskName_);

        setInputPorts(_inputPorts_);

        setOutput(_output_);

        setOutputPorts(_outputPorts_);

        setState(_state_);

        setStatePorts(_statePorts_);

        setTaskWcetAnnotation(_taskWcetAnnotation_);

        setLBrace(_lBrace_);

        setScheduleTask(_scheduleTask_);

        setTaskTimingAnnotation(_taskTimingAnnotation_);

        setRBrace(_rBrace_);

    }
    public Object clone()
    {
        return new ATaskDeclaration(
            (TTask) cloneNode(_task_),
            (TIdent) cloneNode(_taskName_),
            (PFormalPorts) cloneNode(_inputPorts_),
            (TOutput) cloneNode(_output_),
            (PActualPorts) cloneNode(_outputPorts_),
            (TState) cloneNode(_state_),
            (PStatePorts) cloneNode(_statePorts_),
            (PTaskWcetAnnotation) cloneNode(_taskWcetAnnotation_),
            (TLBrace) cloneNode(_lBrace_),
            (PScheduleTask) cloneNode(_scheduleTask_),
            (PTaskTimingAnnotation) cloneNode(_taskTimingAnnotation_),
            (TRBrace) cloneNode(_rBrace_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseATaskDeclaration(this);
    }

    public TTask getTask()
    {
        return _task_;
    }

    public void setTask(TTask node)
    {
        if (_task_ != null)
        {
            _task_.parent(null);
        }

        if (node != null)
        {
            if (node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _task_ = node;
    }

    public TIdent getTaskName()
    {
        return _taskName_;
    }

    public void setTaskName(TIdent node)
    {
        if (_taskName_ != null)
        {
            _taskName_.parent(null);
        }

        if (node != null)
        {
            if (node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _taskName_ = node;
    }

    public PFormalPorts getInputPorts()
    {
        return _inputPorts_;
    }

    public void setInputPorts(PFormalPorts node)
    {
        if (_inputPorts_ != null)
        {
            _inputPorts_.parent(null);
        }

        if (node != null)
        {
            if (node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _inputPorts_ = node;
    }

    public TOutput getOutput()
    {
        return _output_;
    }

    public void setOutput(TOutput node)
    {
        if (_output_ != null)
        {
            _output_.parent(null);
        }

        if (node != null)
        {
            if (node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _output_ = node;
    }

    public PActualPorts getOutputPorts()
    {
        return _outputPorts_;
    }

    public void setOutputPorts(PActualPorts node)
    {
        if (_outputPorts_ != null)
        {
            _outputPorts_.parent(null);
        }

        if (node != null)
        {
            if (node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _outputPorts_ = node;
    }

    public TState getState()
    {
        return _state_;
    }

    public void setState(TState node)
    {
        if (_state_ != null)
        {
            _state_.parent(null);
        }

        if (node != null)
        {
            if (node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _state_ = node;
    }

    public PStatePorts getStatePorts()
    {
        return _statePorts_;
    }

    public void setStatePorts(PStatePorts node)
    {
        if (_statePorts_ != null)
        {
            _statePorts_.parent(null);
        }

        if (node != null)
        {
            if (node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _statePorts_ = node;
    }

    public PTaskWcetAnnotation getTaskWcetAnnotation()
    {
        return _taskWcetAnnotation_;
    }

    public void setTaskWcetAnnotation(PTaskWcetAnnotation node)
    {
        if (_taskWcetAnnotation_ != null)
        {
            _taskWcetAnnotation_.parent(null);
        }

        if (node != null)
        {
            if (node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _taskWcetAnnotation_ = node;
    }

    public TLBrace getLBrace()
    {
        return _lBrace_;
    }

    public void setLBrace(TLBrace node)
    {
        if (_lBrace_ != null)
        {
            _lBrace_.parent(null);
        }

        if (node != null)
        {
            if (node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _lBrace_ = node;
    }

    public PScheduleTask getScheduleTask()
    {
        return _scheduleTask_;
    }

    public void setScheduleTask(PScheduleTask node)
    {
        if (_scheduleTask_ != null)
        {
            _scheduleTask_.parent(null);
        }

        if (node != null)
        {
            if (node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _scheduleTask_ = node;
    }

    public PTaskTimingAnnotation getTaskTimingAnnotation()
    {
        return _taskTimingAnnotation_;
    }

    public void setTaskTimingAnnotation(PTaskTimingAnnotation node)
    {
        if (_taskTimingAnnotation_ != null)
        {
            _taskTimingAnnotation_.parent(null);
        }

        if (node != null)
        {
            if (node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _taskTimingAnnotation_ = node;
    }

    public TRBrace getRBrace()
    {
        return _rBrace_;
    }

    public void setRBrace(TRBrace node)
    {
        if (_rBrace_ != null)
        {
            _rBrace_.parent(null);
        }

        if (node != null)
        {
            if (node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _rBrace_ = node;
    }

    public String toString()
    {
        return ""
            + toString(_task_)
            + toString(_taskName_)
            + toString(_inputPorts_)
            + toString(_output_)
            + toString(_outputPorts_)
            + toString(_state_)
            + toString(_statePorts_)
            + toString(_taskWcetAnnotation_)
            + toString(_lBrace_)
            + toString(_scheduleTask_)
            + toString(_taskTimingAnnotation_)
            + toString(_rBrace_);
    }

    void removeChild(Node child)
    {
        if (_task_ == child)
        {
            _task_ = null;
            return;
        }

        if (_taskName_ == child)
        {
            _taskName_ = null;
            return;
        }

        if (_inputPorts_ == child)
        {
            _inputPorts_ = null;
            return;
        }

        if (_output_ == child)
        {
            _output_ = null;
            return;
        }

        if (_outputPorts_ == child)
        {
            _outputPorts_ = null;
            return;
        }

        if (_state_ == child)
        {
            _state_ = null;
            return;
        }

        if (_statePorts_ == child)
        {
            _statePorts_ = null;
            return;
        }

        if (_taskWcetAnnotation_ == child)
        {
            _taskWcetAnnotation_ = null;
            return;
        }

        if (_lBrace_ == child)
        {
            _lBrace_ = null;
            return;
        }

        if (_scheduleTask_ == child)
        {
            _scheduleTask_ = null;
            return;
        }

        if (_taskTimingAnnotation_ == child)
        {
            _taskTimingAnnotation_ = null;
            return;
        }

        if (_rBrace_ == child)
        {
            _rBrace_ = null;
            return;
        }

    }

    void replaceChild(Node oldChild, Node newChild)
    {
        if (_task_ == oldChild)
        {
            setTask((TTask) newChild);
            return;
        }

        if (_taskName_ == oldChild)
        {
            setTaskName((TIdent) newChild);
            return;
        }

        if (_inputPorts_ == oldChild)
        {
            setInputPorts((PFormalPorts) newChild);
            return;
        }

        if (_output_ == oldChild)
        {
            setOutput((TOutput) newChild);
            return;
        }

        if (_outputPorts_ == oldChild)
        {
            setOutputPorts((PActualPorts) newChild);
            return;
        }

        if (_state_ == oldChild)
        {
            setState((TState) newChild);
            return;
        }

        if (_statePorts_ == oldChild)
        {
            setStatePorts((PStatePorts) newChild);
            return;
        }

        if (_taskWcetAnnotation_ == oldChild)
        {
            setTaskWcetAnnotation((PTaskWcetAnnotation) newChild);
            return;
        }

        if (_lBrace_ == oldChild)
        {
            setLBrace((TLBrace) newChild);
            return;
        }

        if (_scheduleTask_ == oldChild)
        {
            setScheduleTask((PScheduleTask) newChild);
            return;
        }

        if (_taskTimingAnnotation_ == oldChild)
        {
            setTaskTimingAnnotation((PTaskTimingAnnotation) newChild);
            return;
        }

        if (_rBrace_ == oldChild)
        {
            setRBrace((TRBrace) newChild);
            return;
        }

    }
}
