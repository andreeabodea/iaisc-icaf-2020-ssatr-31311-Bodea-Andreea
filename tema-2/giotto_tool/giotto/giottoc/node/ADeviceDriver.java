/* This file was generated by SableCC (http://www.sablecc.org/). */

package giotto.giottoc.node;

import giotto.giottoc.analysis.Analysis;

public final class ADeviceDriver extends PDeviceDriver
{
    private TUses _uses_;
    private TIdent _deviceDriverName_;

    public ADeviceDriver()
    {
    }

    public ADeviceDriver(
        TUses _uses_,
        TIdent _deviceDriverName_)
    {
        setUses(_uses_);

        setDeviceDriverName(_deviceDriverName_);

    }
    public Object clone()
    {
        return new ADeviceDriver(
            (TUses) cloneNode(_uses_),
            (TIdent) cloneNode(_deviceDriverName_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseADeviceDriver(this);
    }

    public TUses getUses()
    {
        return _uses_;
    }

    public void setUses(TUses node)
    {
        if (_uses_ != null)
        {
            _uses_.parent(null);
        }

        if (node != null)
        {
            if (node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _uses_ = node;
    }

    public TIdent getDeviceDriverName()
    {
        return _deviceDriverName_;
    }

    public void setDeviceDriverName(TIdent node)
    {
        if (_deviceDriverName_ != null)
        {
            _deviceDriverName_.parent(null);
        }

        if (node != null)
        {
            if (node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _deviceDriverName_ = node;
    }

    public String toString()
    {
        return ""
            + toString(_uses_)
            + toString(_deviceDriverName_);
    }

    void removeChild(Node child)
    {
        if (_uses_ == child)
        {
            _uses_ = null;
            return;
        }

        if (_deviceDriverName_ == child)
        {
            _deviceDriverName_ = null;
            return;
        }

    }

    void replaceChild(Node oldChild, Node newChild)
    {
        if (_uses_ == oldChild)
        {
            setUses((TUses) newChild);
            return;
        }

        if (_deviceDriverName_ == oldChild)
        {
            setDeviceDriverName((TIdent) newChild);
            return;
        }

    }
}
