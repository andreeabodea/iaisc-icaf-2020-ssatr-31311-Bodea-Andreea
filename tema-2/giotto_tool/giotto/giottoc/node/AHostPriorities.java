/* This file was generated by SableCC (http://www.sablecc.org/). */

package giotto.giottoc.node;

import giotto.giottoc.analysis.Analysis;

public final class AHostPriorities extends PHostPriorities
{
    private TPriorities _priorities_;
    private PPriorityList _priorityList_;

    public AHostPriorities()
    {
    }

    public AHostPriorities(
        TPriorities _priorities_,
        PPriorityList _priorityList_)
    {
        setPriorities(_priorities_);

        setPriorityList(_priorityList_);

    }
    public Object clone()
    {
        return new AHostPriorities(
            (TPriorities) cloneNode(_priorities_),
            (PPriorityList) cloneNode(_priorityList_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAHostPriorities(this);
    }

    public TPriorities getPriorities()
    {
        return _priorities_;
    }

    public void setPriorities(TPriorities node)
    {
        if (_priorities_ != null)
        {
            _priorities_.parent(null);
        }

        if (node != null)
        {
            if (node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _priorities_ = node;
    }

    public PPriorityList getPriorityList()
    {
        return _priorityList_;
    }

    public void setPriorityList(PPriorityList node)
    {
        if (_priorityList_ != null)
        {
            _priorityList_.parent(null);
        }

        if (node != null)
        {
            if (node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _priorityList_ = node;
    }

    public String toString()
    {
        return ""
            + toString(_priorities_)
            + toString(_priorityList_);
    }

    void removeChild(Node child)
    {
        if (_priorities_ == child)
        {
            _priorities_ = null;
            return;
        }

        if (_priorityList_ == child)
        {
            _priorityList_ = null;
            return;
        }

    }

    void replaceChild(Node oldChild, Node newChild)
    {
        if (_priorities_ == oldChild)
        {
            setPriorities((TPriorities) newChild);
            return;
        }

        if (_priorityList_ == oldChild)
        {
            setPriorityList((PPriorityList) newChild);
            return;
        }

    }
}
