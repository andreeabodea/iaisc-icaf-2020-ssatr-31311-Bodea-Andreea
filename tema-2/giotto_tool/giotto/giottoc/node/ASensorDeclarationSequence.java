/* This file was generated by SableCC (http://www.sablecc.org/). */

package giotto.giottoc.node;

import giotto.giottoc.analysis.Analysis;

import java.util.LinkedList;
import java.util.List;
import java.util.ListIterator;

public final class ASensorDeclarationSequence extends PSensorDeclarationSequence
{
    private TSensor _sensor_;
    private final LinkedList _sensorDeclarationList_ = new TypedLinkedList(new SensorDeclarationList_Cast());

    public ASensorDeclarationSequence()
    {
    }

    public ASensorDeclarationSequence(
        TSensor _sensor_,
        List _sensorDeclarationList_)
    {
        setSensor(_sensor_);

        {
            this._sensorDeclarationList_.clear();
            this._sensorDeclarationList_.addAll(_sensorDeclarationList_);
        }

    }

    public ASensorDeclarationSequence(
        TSensor _sensor_,
        XPSensorDeclaration _sensorDeclarationList_)
    {
        setSensor(_sensor_);

        if (_sensorDeclarationList_ != null)
        {
            while (_sensorDeclarationList_ instanceof X1PSensorDeclaration)
            {
                this._sensorDeclarationList_.addFirst(((X1PSensorDeclaration) _sensorDeclarationList_).getPSensorDeclaration());
                _sensorDeclarationList_ = ((X1PSensorDeclaration) _sensorDeclarationList_).getXPSensorDeclaration();
            }
            this._sensorDeclarationList_.addFirst(((X2PSensorDeclaration) _sensorDeclarationList_).getPSensorDeclaration());
        }

    }
    public Object clone()
    {
        return new ASensorDeclarationSequence(
            (TSensor) cloneNode(_sensor_),
            cloneList(_sensorDeclarationList_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseASensorDeclarationSequence(this);
    }

    public TSensor getSensor()
    {
        return _sensor_;
    }

    public void setSensor(TSensor node)
    {
        if (_sensor_ != null)
        {
            _sensor_.parent(null);
        }

        if (node != null)
        {
            if (node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _sensor_ = node;
    }

    public LinkedList getSensorDeclarationList()
    {
        return _sensorDeclarationList_;
    }

    public void setSensorDeclarationList(List list)
    {
        _sensorDeclarationList_.clear();
        _sensorDeclarationList_.addAll(list);
    }

    public String toString()
    {
        return ""
            + toString(_sensor_)
            + toString(_sensorDeclarationList_);
    }

    void removeChild(Node child)
    {
        if (_sensor_ == child)
        {
            _sensor_ = null;
            return;
        }

        if (_sensorDeclarationList_.remove(child))
        {
            return;
        }

    }

    void replaceChild(Node oldChild, Node newChild)
    {
        if (_sensor_ == oldChild)
        {
            setSensor((TSensor) newChild);
            return;
        }

        for (ListIterator i = _sensorDeclarationList_.listIterator(); i.hasNext();)
        {
            if (i.next() == oldChild)
            {
                if (newChild != null)
                {
                    i.set(newChild);
                    oldChild.parent(null);
                    return;
                }

                i.remove();
                oldChild.parent(null);
                return;
            }
        }

    }

    private class SensorDeclarationList_Cast implements Cast
    {
        public Object cast(Object o)
        {
            PSensorDeclaration node = (PSensorDeclaration) o;

            if ((node.parent() != null) &&
                (node.parent() != ASensorDeclarationSequence.this))
            {
                node.parent().removeChild(node);
            }

            if ((node.parent() == null) ||
                (node.parent() != ASensorDeclarationSequence.this))
            {
                node.parent(ASensorDeclarationSequence.this);
            }

            return node;
        }
    }
}
