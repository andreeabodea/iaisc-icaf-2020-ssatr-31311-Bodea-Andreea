/* This file was generated by SableCC (http://www.sablecc.org/). */

package giotto.giottoc.node;

import giotto.giottoc.analysis.Analysis;

import java.util.LinkedList;
import java.util.List;
import java.util.ListIterator;

public final class AProgram extends PProgram
{
    private PHardwareAnnotation _hardwareAnnotation_;
    private PModuleDeclarationSequence _moduleDeclarationSequence_;
    private PTypeDeclarationSequence _typeDeclarationSequence_;
    private PSensorDeclarationSequence _sensorDeclarationSequence_;
    private PActuatorDeclarationSequence _actuatorDeclarationSequence_;
    private POutputDeclarationSequence _outputDeclarationSequence_;
    private final LinkedList _taskDeclarationList_ = new TypedLinkedList(new TaskDeclarationList_Cast());
    private final LinkedList _driverDeclarationList_ = new TypedLinkedList(new DriverDeclarationList_Cast());
    private PModeDeclarationSequence _modeDeclarationSequence_;

    public AProgram()
    {
    }

    public AProgram(
        PHardwareAnnotation _hardwareAnnotation_,
        PModuleDeclarationSequence _moduleDeclarationSequence_,
        PTypeDeclarationSequence _typeDeclarationSequence_,
        PSensorDeclarationSequence _sensorDeclarationSequence_,
        PActuatorDeclarationSequence _actuatorDeclarationSequence_,
        POutputDeclarationSequence _outputDeclarationSequence_,
        List _taskDeclarationList_,
        List _driverDeclarationList_,
        PModeDeclarationSequence _modeDeclarationSequence_)
    {
        setHardwareAnnotation(_hardwareAnnotation_);

        setModuleDeclarationSequence(_moduleDeclarationSequence_);

        setTypeDeclarationSequence(_typeDeclarationSequence_);

        setSensorDeclarationSequence(_sensorDeclarationSequence_);

        setActuatorDeclarationSequence(_actuatorDeclarationSequence_);

        setOutputDeclarationSequence(_outputDeclarationSequence_);

        {
            this._taskDeclarationList_.clear();
            this._taskDeclarationList_.addAll(_taskDeclarationList_);
        }

        {
            this._driverDeclarationList_.clear();
            this._driverDeclarationList_.addAll(_driverDeclarationList_);
        }

        setModeDeclarationSequence(_modeDeclarationSequence_);

    }

    public AProgram(
        PHardwareAnnotation _hardwareAnnotation_,
        PModuleDeclarationSequence _moduleDeclarationSequence_,
        PTypeDeclarationSequence _typeDeclarationSequence_,
        PSensorDeclarationSequence _sensorDeclarationSequence_,
        PActuatorDeclarationSequence _actuatorDeclarationSequence_,
        POutputDeclarationSequence _outputDeclarationSequence_,
        XPTaskDeclaration _taskDeclarationList_,
        XPDriverDeclaration _driverDeclarationList_,
        PModeDeclarationSequence _modeDeclarationSequence_)
    {
        setHardwareAnnotation(_hardwareAnnotation_);

        setModuleDeclarationSequence(_moduleDeclarationSequence_);

        setTypeDeclarationSequence(_typeDeclarationSequence_);

        setSensorDeclarationSequence(_sensorDeclarationSequence_);

        setActuatorDeclarationSequence(_actuatorDeclarationSequence_);

        setOutputDeclarationSequence(_outputDeclarationSequence_);

        if (_taskDeclarationList_ != null)
        {
            while (_taskDeclarationList_ instanceof X1PTaskDeclaration)
            {
                this._taskDeclarationList_.addFirst(((X1PTaskDeclaration) _taskDeclarationList_).getPTaskDeclaration());
                _taskDeclarationList_ = ((X1PTaskDeclaration) _taskDeclarationList_).getXPTaskDeclaration();
            }
            this._taskDeclarationList_.addFirst(((X2PTaskDeclaration) _taskDeclarationList_).getPTaskDeclaration());
        }

        if (_driverDeclarationList_ != null)
        {
            while (_driverDeclarationList_ instanceof X1PDriverDeclaration)
            {
                this._driverDeclarationList_.addFirst(((X1PDriverDeclaration) _driverDeclarationList_).getPDriverDeclaration());
                _driverDeclarationList_ = ((X1PDriverDeclaration) _driverDeclarationList_).getXPDriverDeclaration();
            }
            this._driverDeclarationList_.addFirst(((X2PDriverDeclaration) _driverDeclarationList_).getPDriverDeclaration());
        }

        setModeDeclarationSequence(_modeDeclarationSequence_);

    }
    public Object clone()
    {
        return new AProgram(
            (PHardwareAnnotation) cloneNode(_hardwareAnnotation_),
            (PModuleDeclarationSequence) cloneNode(_moduleDeclarationSequence_),
            (PTypeDeclarationSequence) cloneNode(_typeDeclarationSequence_),
            (PSensorDeclarationSequence) cloneNode(_sensorDeclarationSequence_),
            (PActuatorDeclarationSequence) cloneNode(_actuatorDeclarationSequence_),
            (POutputDeclarationSequence) cloneNode(_outputDeclarationSequence_),
            cloneList(_taskDeclarationList_),
            cloneList(_driverDeclarationList_),
            (PModeDeclarationSequence) cloneNode(_modeDeclarationSequence_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAProgram(this);
    }

    public PHardwareAnnotation getHardwareAnnotation()
    {
        return _hardwareAnnotation_;
    }

    public void setHardwareAnnotation(PHardwareAnnotation node)
    {
        if (_hardwareAnnotation_ != null)
        {
            _hardwareAnnotation_.parent(null);
        }

        if (node != null)
        {
            if (node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _hardwareAnnotation_ = node;
    }

    public PModuleDeclarationSequence getModuleDeclarationSequence()
    {
        return _moduleDeclarationSequence_;
    }

    public void setModuleDeclarationSequence(PModuleDeclarationSequence node)
    {
        if (_moduleDeclarationSequence_ != null)
        {
            _moduleDeclarationSequence_.parent(null);
        }

        if (node != null)
        {
            if (node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _moduleDeclarationSequence_ = node;
    }

    public PTypeDeclarationSequence getTypeDeclarationSequence()
    {
        return _typeDeclarationSequence_;
    }

    public void setTypeDeclarationSequence(PTypeDeclarationSequence node)
    {
        if (_typeDeclarationSequence_ != null)
        {
            _typeDeclarationSequence_.parent(null);
        }

        if (node != null)
        {
            if (node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _typeDeclarationSequence_ = node;
    }

    public PSensorDeclarationSequence getSensorDeclarationSequence()
    {
        return _sensorDeclarationSequence_;
    }

    public void setSensorDeclarationSequence(PSensorDeclarationSequence node)
    {
        if (_sensorDeclarationSequence_ != null)
        {
            _sensorDeclarationSequence_.parent(null);
        }

        if (node != null)
        {
            if (node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _sensorDeclarationSequence_ = node;
    }

    public PActuatorDeclarationSequence getActuatorDeclarationSequence()
    {
        return _actuatorDeclarationSequence_;
    }

    public void setActuatorDeclarationSequence(PActuatorDeclarationSequence node)
    {
        if (_actuatorDeclarationSequence_ != null)
        {
            _actuatorDeclarationSequence_.parent(null);
        }

        if (node != null)
        {
            if (node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _actuatorDeclarationSequence_ = node;
    }

    public POutputDeclarationSequence getOutputDeclarationSequence()
    {
        return _outputDeclarationSequence_;
    }

    public void setOutputDeclarationSequence(POutputDeclarationSequence node)
    {
        if (_outputDeclarationSequence_ != null)
        {
            _outputDeclarationSequence_.parent(null);
        }

        if (node != null)
        {
            if (node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _outputDeclarationSequence_ = node;
    }

    public LinkedList getTaskDeclarationList()
    {
        return _taskDeclarationList_;
    }

    public void setTaskDeclarationList(List list)
    {
        _taskDeclarationList_.clear();
        _taskDeclarationList_.addAll(list);
    }

    public LinkedList getDriverDeclarationList()
    {
        return _driverDeclarationList_;
    }

    public void setDriverDeclarationList(List list)
    {
        _driverDeclarationList_.clear();
        _driverDeclarationList_.addAll(list);
    }

    public PModeDeclarationSequence getModeDeclarationSequence()
    {
        return _modeDeclarationSequence_;
    }

    public void setModeDeclarationSequence(PModeDeclarationSequence node)
    {
        if (_modeDeclarationSequence_ != null)
        {
            _modeDeclarationSequence_.parent(null);
        }

        if (node != null)
        {
            if (node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _modeDeclarationSequence_ = node;
    }

    public String toString()
    {
        return ""
            + toString(_hardwareAnnotation_)
            + toString(_moduleDeclarationSequence_)
            + toString(_typeDeclarationSequence_)
            + toString(_sensorDeclarationSequence_)
            + toString(_actuatorDeclarationSequence_)
            + toString(_outputDeclarationSequence_)
            + toString(_taskDeclarationList_)
            + toString(_driverDeclarationList_)
            + toString(_modeDeclarationSequence_);
    }

    void removeChild(Node child)
    {
        if (_hardwareAnnotation_ == child)
        {
            _hardwareAnnotation_ = null;
            return;
        }

        if (_moduleDeclarationSequence_ == child)
        {
            _moduleDeclarationSequence_ = null;
            return;
        }

        if (_typeDeclarationSequence_ == child)
        {
            _typeDeclarationSequence_ = null;
            return;
        }

        if (_sensorDeclarationSequence_ == child)
        {
            _sensorDeclarationSequence_ = null;
            return;
        }

        if (_actuatorDeclarationSequence_ == child)
        {
            _actuatorDeclarationSequence_ = null;
            return;
        }

        if (_outputDeclarationSequence_ == child)
        {
            _outputDeclarationSequence_ = null;
            return;
        }

        if (_taskDeclarationList_.remove(child))
        {
            return;
        }

        if (_driverDeclarationList_.remove(child))
        {
            return;
        }

        if (_modeDeclarationSequence_ == child)
        {
            _modeDeclarationSequence_ = null;
            return;
        }

    }

    void replaceChild(Node oldChild, Node newChild)
    {
        if (_hardwareAnnotation_ == oldChild)
        {
            setHardwareAnnotation((PHardwareAnnotation) newChild);
            return;
        }

        if (_moduleDeclarationSequence_ == oldChild)
        {
            setModuleDeclarationSequence((PModuleDeclarationSequence) newChild);
            return;
        }

        if (_typeDeclarationSequence_ == oldChild)
        {
            setTypeDeclarationSequence((PTypeDeclarationSequence) newChild);
            return;
        }

        if (_sensorDeclarationSequence_ == oldChild)
        {
            setSensorDeclarationSequence((PSensorDeclarationSequence) newChild);
            return;
        }

        if (_actuatorDeclarationSequence_ == oldChild)
        {
            setActuatorDeclarationSequence((PActuatorDeclarationSequence) newChild);
            return;
        }

        if (_outputDeclarationSequence_ == oldChild)
        {
            setOutputDeclarationSequence((POutputDeclarationSequence) newChild);
            return;
        }

        for (ListIterator i = _taskDeclarationList_.listIterator(); i.hasNext();)
        {
            if (i.next() == oldChild)
            {
                if (newChild != null)
                {
                    i.set(newChild);
                    oldChild.parent(null);
                    return;
                }

                i.remove();
                oldChild.parent(null);
                return;
            }
        }

        for (ListIterator i = _driverDeclarationList_.listIterator(); i.hasNext();)
        {
            if (i.next() == oldChild)
            {
                if (newChild != null)
                {
                    i.set(newChild);
                    oldChild.parent(null);
                    return;
                }

                i.remove();
                oldChild.parent(null);
                return;
            }
        }

        if (_modeDeclarationSequence_ == oldChild)
        {
            setModeDeclarationSequence((PModeDeclarationSequence) newChild);
            return;
        }

    }

    private class TaskDeclarationList_Cast implements Cast
    {
        public Object cast(Object o)
        {
            PTaskDeclaration node = (PTaskDeclaration) o;

            if ((node.parent() != null) &&
                (node.parent() != AProgram.this))
            {
                node.parent().removeChild(node);
            }

            if ((node.parent() == null) ||
                (node.parent() != AProgram.this))
            {
                node.parent(AProgram.this);
            }

            return node;
        }
    }

    private class DriverDeclarationList_Cast implements Cast
    {
        public Object cast(Object o)
        {
            PDriverDeclaration node = (PDriverDeclaration) o;

            if ((node.parent() != null) &&
                (node.parent() != AProgram.this))
            {
                node.parent().removeChild(node);
            }

            if ((node.parent() == null) ||
                (node.parent() != AProgram.this))
            {
                node.parent(AProgram.this);
            }

            return node;
        }
    }
}
