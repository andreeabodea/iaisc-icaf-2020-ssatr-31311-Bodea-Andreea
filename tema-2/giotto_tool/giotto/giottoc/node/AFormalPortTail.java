/* This file was generated by SableCC (http://www.sablecc.org/). */

package giotto.giottoc.node;

import giotto.giottoc.analysis.Analysis;

public final class AFormalPortTail extends PFormalPortTail
{
    private TComma _comma_;
    private PFormalPort _formalPort_;

    public AFormalPortTail()
    {
    }

    public AFormalPortTail(
        TComma _comma_,
        PFormalPort _formalPort_)
    {
        setComma(_comma_);

        setFormalPort(_formalPort_);

    }
    public Object clone()
    {
        return new AFormalPortTail(
            (TComma) cloneNode(_comma_),
            (PFormalPort) cloneNode(_formalPort_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAFormalPortTail(this);
    }

    public TComma getComma()
    {
        return _comma_;
    }

    public void setComma(TComma node)
    {
        if (_comma_ != null)
        {
            _comma_.parent(null);
        }

        if (node != null)
        {
            if (node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _comma_ = node;
    }

    public PFormalPort getFormalPort()
    {
        return _formalPort_;
    }

    public void setFormalPort(PFormalPort node)
    {
        if (_formalPort_ != null)
        {
            _formalPort_.parent(null);
        }

        if (node != null)
        {
            if (node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _formalPort_ = node;
    }

    public String toString()
    {
        return ""
            + toString(_comma_)
            + toString(_formalPort_);
    }

    void removeChild(Node child)
    {
        if (_comma_ == child)
        {
            _comma_ = null;
            return;
        }

        if (_formalPort_ == child)
        {
            _formalPort_ = null;
            return;
        }

    }

    void replaceChild(Node oldChild, Node newChild)
    {
        if (_comma_ == oldChild)
        {
            setComma((TComma) newChild);
            return;
        }

        if (_formalPort_ == oldChild)
        {
            setFormalPort((PFormalPort) newChild);
            return;
        }

    }
}
