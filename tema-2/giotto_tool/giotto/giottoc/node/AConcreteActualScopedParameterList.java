/* This file was generated by SableCC (http://www.sablecc.org/). */

package giotto.giottoc.node;

import giotto.giottoc.analysis.Analysis;

import java.util.LinkedList;
import java.util.List;
import java.util.ListIterator;

public final class AConcreteActualScopedParameterList extends PActualScopedParameterList
{
    private PActualScopedParameter _actualScopedParameter_;
    private final LinkedList _actualScopedParameterTail_ = new TypedLinkedList(new ActualScopedParameterTail_Cast());

    public AConcreteActualScopedParameterList()
    {
    }

    public AConcreteActualScopedParameterList(
        PActualScopedParameter _actualScopedParameter_,
        List _actualScopedParameterTail_)
    {
        setActualScopedParameter(_actualScopedParameter_);

        {
            this._actualScopedParameterTail_.clear();
            this._actualScopedParameterTail_.addAll(_actualScopedParameterTail_);
        }

    }

    public AConcreteActualScopedParameterList(
        PActualScopedParameter _actualScopedParameter_,
        XPActualScopedParameterTail _actualScopedParameterTail_)
    {
        setActualScopedParameter(_actualScopedParameter_);

        if (_actualScopedParameterTail_ != null)
        {
            while (_actualScopedParameterTail_ instanceof X1PActualScopedParameterTail)
            {
                this._actualScopedParameterTail_.addFirst(((X1PActualScopedParameterTail) _actualScopedParameterTail_).getPActualScopedParameterTail());
                _actualScopedParameterTail_ = ((X1PActualScopedParameterTail) _actualScopedParameterTail_).getXPActualScopedParameterTail();
            }
            this._actualScopedParameterTail_.addFirst(((X2PActualScopedParameterTail) _actualScopedParameterTail_).getPActualScopedParameterTail());
        }

    }
    public Object clone()
    {
        return new AConcreteActualScopedParameterList(
            (PActualScopedParameter) cloneNode(_actualScopedParameter_),
            cloneList(_actualScopedParameterTail_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAConcreteActualScopedParameterList(this);
    }

    public PActualScopedParameter getActualScopedParameter()
    {
        return _actualScopedParameter_;
    }

    public void setActualScopedParameter(PActualScopedParameter node)
    {
        if (_actualScopedParameter_ != null)
        {
            _actualScopedParameter_.parent(null);
        }

        if (node != null)
        {
            if (node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _actualScopedParameter_ = node;
    }

    public LinkedList getActualScopedParameterTail()
    {
        return _actualScopedParameterTail_;
    }

    public void setActualScopedParameterTail(List list)
    {
        _actualScopedParameterTail_.clear();
        _actualScopedParameterTail_.addAll(list);
    }

    public String toString()
    {
        return ""
            + toString(_actualScopedParameter_)
            + toString(_actualScopedParameterTail_);
    }

    void removeChild(Node child)
    {
        if (_actualScopedParameter_ == child)
        {
            _actualScopedParameter_ = null;
            return;
        }

        if (_actualScopedParameterTail_.remove(child))
        {
            return;
        }

    }

    void replaceChild(Node oldChild, Node newChild)
    {
        if (_actualScopedParameter_ == oldChild)
        {
            setActualScopedParameter((PActualScopedParameter) newChild);
            return;
        }

        for (ListIterator i = _actualScopedParameterTail_.listIterator(); i.hasNext();)
        {
            if (i.next() == oldChild)
            {
                if (newChild != null)
                {
                    i.set(newChild);
                    oldChild.parent(null);
                    return;
                }

                i.remove();
                oldChild.parent(null);
                return;
            }
        }

    }

    private class ActualScopedParameterTail_Cast implements Cast
    {
        public Object cast(Object o)
        {
            PActualScopedParameterTail node = (PActualScopedParameterTail) o;

            if ((node.parent() != null) &&
                (node.parent() != AConcreteActualScopedParameterList.this))
            {
                node.parent().removeChild(node);
            }

            if ((node.parent() == null) ||
                (node.parent() != AConcreteActualScopedParameterList.this))
            {
                node.parent(AConcreteActualScopedParameterList.this);
            }

            return node;
        }
    }
}
