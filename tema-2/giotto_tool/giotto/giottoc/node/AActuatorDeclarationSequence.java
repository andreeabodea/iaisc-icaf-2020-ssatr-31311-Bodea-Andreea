/* This file was generated by SableCC (http://www.sablecc.org/). */

package giotto.giottoc.node;

import giotto.giottoc.analysis.Analysis;

import java.util.LinkedList;
import java.util.List;
import java.util.ListIterator;

public final class AActuatorDeclarationSequence extends PActuatorDeclarationSequence
{
    private TActuator _actuator_;
    private final LinkedList _actuatorDeclarationList_ = new TypedLinkedList(new ActuatorDeclarationList_Cast());

    public AActuatorDeclarationSequence()
    {
    }

    public AActuatorDeclarationSequence(
        TActuator _actuator_,
        List _actuatorDeclarationList_)
    {
        setActuator(_actuator_);

        {
            this._actuatorDeclarationList_.clear();
            this._actuatorDeclarationList_.addAll(_actuatorDeclarationList_);
        }

    }

    public AActuatorDeclarationSequence(
        TActuator _actuator_,
        XPActuatorDeclaration _actuatorDeclarationList_)
    {
        setActuator(_actuator_);

        if (_actuatorDeclarationList_ != null)
        {
            while (_actuatorDeclarationList_ instanceof X1PActuatorDeclaration)
            {
                this._actuatorDeclarationList_.addFirst(((X1PActuatorDeclaration) _actuatorDeclarationList_).getPActuatorDeclaration());
                _actuatorDeclarationList_ = ((X1PActuatorDeclaration) _actuatorDeclarationList_).getXPActuatorDeclaration();
            }
            this._actuatorDeclarationList_.addFirst(((X2PActuatorDeclaration) _actuatorDeclarationList_).getPActuatorDeclaration());
        }

    }
    public Object clone()
    {
        return new AActuatorDeclarationSequence(
            (TActuator) cloneNode(_actuator_),
            cloneList(_actuatorDeclarationList_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAActuatorDeclarationSequence(this);
    }

    public TActuator getActuator()
    {
        return _actuator_;
    }

    public void setActuator(TActuator node)
    {
        if (_actuator_ != null)
        {
            _actuator_.parent(null);
        }

        if (node != null)
        {
            if (node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _actuator_ = node;
    }

    public LinkedList getActuatorDeclarationList()
    {
        return _actuatorDeclarationList_;
    }

    public void setActuatorDeclarationList(List list)
    {
        _actuatorDeclarationList_.clear();
        _actuatorDeclarationList_.addAll(list);
    }

    public String toString()
    {
        return ""
            + toString(_actuator_)
            + toString(_actuatorDeclarationList_);
    }

    void removeChild(Node child)
    {
        if (_actuator_ == child)
        {
            _actuator_ = null;
            return;
        }

        if (_actuatorDeclarationList_.remove(child))
        {
            return;
        }

    }

    void replaceChild(Node oldChild, Node newChild)
    {
        if (_actuator_ == oldChild)
        {
            setActuator((TActuator) newChild);
            return;
        }

        for (ListIterator i = _actuatorDeclarationList_.listIterator(); i.hasNext();)
        {
            if (i.next() == oldChild)
            {
                if (newChild != null)
                {
                    i.set(newChild);
                    oldChild.parent(null);
                    return;
                }

                i.remove();
                oldChild.parent(null);
                return;
            }
        }

    }

    private class ActuatorDeclarationList_Cast implements Cast
    {
        public Object cast(Object o)
        {
            PActuatorDeclaration node = (PActuatorDeclaration) o;

            if ((node.parent() != null) &&
                (node.parent() != AActuatorDeclarationSequence.this))
            {
                node.parent().removeChild(node);
            }

            if ((node.parent() == null) ||
                (node.parent() != AActuatorDeclarationSequence.this))
            {
                node.parent(AActuatorDeclarationSequence.this);
            }

            return node;
        }
    }
}
