/* This file was generated by SableCC (http://www.sablecc.org/). */

package giotto.giottoc.node;

import giotto.giottoc.analysis.Analysis;

import java.util.LinkedList;
import java.util.List;
import java.util.ListIterator;

public final class ATypeDeclarationSequence extends PTypeDeclarationSequence
{
    private TType _type_;
    private final LinkedList _typeDeclarationList_ = new TypedLinkedList(new TypeDeclarationList_Cast());

    public ATypeDeclarationSequence()
    {
    }

    public ATypeDeclarationSequence(
        TType _type_,
        List _typeDeclarationList_)
    {
        setType(_type_);

        {
            this._typeDeclarationList_.clear();
            this._typeDeclarationList_.addAll(_typeDeclarationList_);
        }

    }

    public ATypeDeclarationSequence(
        TType _type_,
        XPTypeDeclaration _typeDeclarationList_)
    {
        setType(_type_);

        if (_typeDeclarationList_ != null)
        {
            while (_typeDeclarationList_ instanceof X1PTypeDeclaration)
            {
                this._typeDeclarationList_.addFirst(((X1PTypeDeclaration) _typeDeclarationList_).getPTypeDeclaration());
                _typeDeclarationList_ = ((X1PTypeDeclaration) _typeDeclarationList_).getXPTypeDeclaration();
            }
            this._typeDeclarationList_.addFirst(((X2PTypeDeclaration) _typeDeclarationList_).getPTypeDeclaration());
        }

    }
    public Object clone()
    {
        return new ATypeDeclarationSequence(
            (TType) cloneNode(_type_),
            cloneList(_typeDeclarationList_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseATypeDeclarationSequence(this);
    }

    public TType getType()
    {
        return _type_;
    }

    public void setType(TType node)
    {
        if (_type_ != null)
        {
            _type_.parent(null);
        }

        if (node != null)
        {
            if (node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _type_ = node;
    }

    public LinkedList getTypeDeclarationList()
    {
        return _typeDeclarationList_;
    }

    public void setTypeDeclarationList(List list)
    {
        _typeDeclarationList_.clear();
        _typeDeclarationList_.addAll(list);
    }

    public String toString()
    {
        return ""
            + toString(_type_)
            + toString(_typeDeclarationList_);
    }

    void removeChild(Node child)
    {
        if (_type_ == child)
        {
            _type_ = null;
            return;
        }

        if (_typeDeclarationList_.remove(child))
        {
            return;
        }

    }

    void replaceChild(Node oldChild, Node newChild)
    {
        if (_type_ == oldChild)
        {
            setType((TType) newChild);
            return;
        }

        for (ListIterator i = _typeDeclarationList_.listIterator(); i.hasNext();)
        {
            if (i.next() == oldChild)
            {
                if (newChild != null)
                {
                    i.set(newChild);
                    oldChild.parent(null);
                    return;
                }

                i.remove();
                oldChild.parent(null);
                return;
            }
        }

    }

    private class TypeDeclarationList_Cast implements Cast
    {
        public Object cast(Object o)
        {
            PTypeDeclaration node = (PTypeDeclaration) o;

            if ((node.parent() != null) &&
                (node.parent() != ATypeDeclarationSequence.this))
            {
                node.parent().removeChild(node);
            }

            if ((node.parent() == null) ||
                (node.parent() != ATypeDeclarationSequence.this))
            {
                node.parent(ATypeDeclarationSequence.this);
            }

            return node;
        }
    }
}
