/* This file was generated by SableCC (http://www.sablecc.org/). */

package giotto.giottoc.node;

import giotto.giottoc.analysis.Analysis;

public final class ANetworkDeclaration extends PNetworkDeclaration
{
    private TNetwork _network_;
    private TIdent _networkName_;
    private TAddress _address_;
    private PIP _networkIP_;
    private PNetworkConnection _networkConnection_;

    public ANetworkDeclaration()
    {
    }

    public ANetworkDeclaration(
        TNetwork _network_,
        TIdent _networkName_,
        TAddress _address_,
        PIP _networkIP_,
        PNetworkConnection _networkConnection_)
    {
        setNetwork(_network_);

        setNetworkName(_networkName_);

        setAddress(_address_);

        setNetworkIP(_networkIP_);

        setNetworkConnection(_networkConnection_);

    }
    public Object clone()
    {
        return new ANetworkDeclaration(
            (TNetwork) cloneNode(_network_),
            (TIdent) cloneNode(_networkName_),
            (TAddress) cloneNode(_address_),
            (PIP) cloneNode(_networkIP_),
            (PNetworkConnection) cloneNode(_networkConnection_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseANetworkDeclaration(this);
    }

    public TNetwork getNetwork()
    {
        return _network_;
    }

    public void setNetwork(TNetwork node)
    {
        if (_network_ != null)
        {
            _network_.parent(null);
        }

        if (node != null)
        {
            if (node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _network_ = node;
    }

    public TIdent getNetworkName()
    {
        return _networkName_;
    }

    public void setNetworkName(TIdent node)
    {
        if (_networkName_ != null)
        {
            _networkName_.parent(null);
        }

        if (node != null)
        {
            if (node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _networkName_ = node;
    }

    public TAddress getAddress()
    {
        return _address_;
    }

    public void setAddress(TAddress node)
    {
        if (_address_ != null)
        {
            _address_.parent(null);
        }

        if (node != null)
        {
            if (node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _address_ = node;
    }

    public PIP getNetworkIP()
    {
        return _networkIP_;
    }

    public void setNetworkIP(PIP node)
    {
        if (_networkIP_ != null)
        {
            _networkIP_.parent(null);
        }

        if (node != null)
        {
            if (node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _networkIP_ = node;
    }

    public PNetworkConnection getNetworkConnection()
    {
        return _networkConnection_;
    }

    public void setNetworkConnection(PNetworkConnection node)
    {
        if (_networkConnection_ != null)
        {
            _networkConnection_.parent(null);
        }

        if (node != null)
        {
            if (node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _networkConnection_ = node;
    }

    public String toString()
    {
        return ""
            + toString(_network_)
            + toString(_networkName_)
            + toString(_address_)
            + toString(_networkIP_)
            + toString(_networkConnection_);
    }

    void removeChild(Node child)
    {
        if (_network_ == child)
        {
            _network_ = null;
            return;
        }

        if (_networkName_ == child)
        {
            _networkName_ = null;
            return;
        }

        if (_address_ == child)
        {
            _address_ = null;
            return;
        }

        if (_networkIP_ == child)
        {
            _networkIP_ = null;
            return;
        }

        if (_networkConnection_ == child)
        {
            _networkConnection_ = null;
            return;
        }

    }

    void replaceChild(Node oldChild, Node newChild)
    {
        if (_network_ == oldChild)
        {
            setNetwork((TNetwork) newChild);
            return;
        }

        if (_networkName_ == oldChild)
        {
            setNetworkName((TIdent) newChild);
            return;
        }

        if (_address_ == oldChild)
        {
            setAddress((TAddress) newChild);
            return;
        }

        if (_networkIP_ == oldChild)
        {
            setNetworkIP((PIP) newChild);
            return;
        }

        if (_networkConnection_ == oldChild)
        {
            setNetworkConnection((PNetworkConnection) newChild);
            return;
        }

    }
}
