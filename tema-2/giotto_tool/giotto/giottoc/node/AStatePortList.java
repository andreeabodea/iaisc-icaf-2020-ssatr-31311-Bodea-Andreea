/* This file was generated by SableCC (http://www.sablecc.org/). */

package giotto.giottoc.node;

import giotto.giottoc.analysis.Analysis;

import java.util.LinkedList;
import java.util.List;
import java.util.ListIterator;

public final class AStatePortList extends PStatePortList
{
    private final LinkedList _statePort_ = new TypedLinkedList(new StatePort_Cast());

    public AStatePortList()
    {
    }

    public AStatePortList(
        List _statePort_)
    {
        {
            this._statePort_.clear();
            this._statePort_.addAll(_statePort_);
        }

    }

    public AStatePortList(
        XPStatePort _statePort_)
    {
        if (_statePort_ != null)
        {
            while (_statePort_ instanceof X1PStatePort)
            {
                this._statePort_.addFirst(((X1PStatePort) _statePort_).getPStatePort());
                _statePort_ = ((X1PStatePort) _statePort_).getXPStatePort();
            }
            this._statePort_.addFirst(((X2PStatePort) _statePort_).getPStatePort());
        }

    }
    public Object clone()
    {
        return new AStatePortList(
            cloneList(_statePort_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAStatePortList(this);
    }

    public LinkedList getStatePort()
    {
        return _statePort_;
    }

    public void setStatePort(List list)
    {
        _statePort_.clear();
        _statePort_.addAll(list);
    }

    public String toString()
    {
        return ""
            + toString(_statePort_);
    }

    void removeChild(Node child)
    {
        if (_statePort_.remove(child))
        {
            return;
        }

    }

    void replaceChild(Node oldChild, Node newChild)
    {
        for (ListIterator i = _statePort_.listIterator(); i.hasNext();)
        {
            if (i.next() == oldChild)
            {
                if (newChild != null)
                {
                    i.set(newChild);
                    oldChild.parent(null);
                    return;
                }

                i.remove();
                oldChild.parent(null);
                return;
            }
        }

    }

    private class StatePort_Cast implements Cast
    {
        public Object cast(Object o)
        {
            PStatePort node = (PStatePort) o;

            if ((node.parent() != null) &&
                (node.parent() != AStatePortList.this))
            {
                node.parent().removeChild(node);
            }

            if ((node.parent() == null) ||
                (node.parent() != AStatePortList.this))
            {
                node.parent(AStatePortList.this);
            }

            return node;
        }
    }
}
