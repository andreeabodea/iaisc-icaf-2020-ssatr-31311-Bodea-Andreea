/* This file was generated by SableCC (http://www.sablecc.org/). */

package giotto.giottoc.node;

import giotto.giottoc.analysis.Analysis;

import java.util.LinkedList;
import java.util.List;
import java.util.ListIterator;

public final class AModeDeclarationSequence extends PModeDeclarationSequence
{
    private TStart _start_;
    private TIdent _modeName_;
    private TLBrace _lBrace_;
    private final LinkedList _modeDeclarationList_ = new TypedLinkedList(new ModeDeclarationList_Cast());
    private TRBrace _rBrace_;

    public AModeDeclarationSequence()
    {
    }

    public AModeDeclarationSequence(
        TStart _start_,
        TIdent _modeName_,
        TLBrace _lBrace_,
        List _modeDeclarationList_,
        TRBrace _rBrace_)
    {
        setStart(_start_);

        setModeName(_modeName_);

        setLBrace(_lBrace_);

        {
            this._modeDeclarationList_.clear();
            this._modeDeclarationList_.addAll(_modeDeclarationList_);
        }

        setRBrace(_rBrace_);

    }

    public AModeDeclarationSequence(
        TStart _start_,
        TIdent _modeName_,
        TLBrace _lBrace_,
        XPModeDeclaration _modeDeclarationList_,
        TRBrace _rBrace_)
    {
        setStart(_start_);

        setModeName(_modeName_);

        setLBrace(_lBrace_);

        if (_modeDeclarationList_ != null)
        {
            while (_modeDeclarationList_ instanceof X1PModeDeclaration)
            {
                this._modeDeclarationList_.addFirst(((X1PModeDeclaration) _modeDeclarationList_).getPModeDeclaration());
                _modeDeclarationList_ = ((X1PModeDeclaration) _modeDeclarationList_).getXPModeDeclaration();
            }
            this._modeDeclarationList_.addFirst(((X2PModeDeclaration) _modeDeclarationList_).getPModeDeclaration());
        }

        setRBrace(_rBrace_);

    }
    public Object clone()
    {
        return new AModeDeclarationSequence(
            (TStart) cloneNode(_start_),
            (TIdent) cloneNode(_modeName_),
            (TLBrace) cloneNode(_lBrace_),
            cloneList(_modeDeclarationList_),
            (TRBrace) cloneNode(_rBrace_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAModeDeclarationSequence(this);
    }

    public TStart getStart()
    {
        return _start_;
    }

    public void setStart(TStart node)
    {
        if (_start_ != null)
        {
            _start_.parent(null);
        }

        if (node != null)
        {
            if (node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _start_ = node;
    }

    public TIdent getModeName()
    {
        return _modeName_;
    }

    public void setModeName(TIdent node)
    {
        if (_modeName_ != null)
        {
            _modeName_.parent(null);
        }

        if (node != null)
        {
            if (node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _modeName_ = node;
    }

    public TLBrace getLBrace()
    {
        return _lBrace_;
    }

    public void setLBrace(TLBrace node)
    {
        if (_lBrace_ != null)
        {
            _lBrace_.parent(null);
        }

        if (node != null)
        {
            if (node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _lBrace_ = node;
    }

    public LinkedList getModeDeclarationList()
    {
        return _modeDeclarationList_;
    }

    public void setModeDeclarationList(List list)
    {
        _modeDeclarationList_.clear();
        _modeDeclarationList_.addAll(list);
    }

    public TRBrace getRBrace()
    {
        return _rBrace_;
    }

    public void setRBrace(TRBrace node)
    {
        if (_rBrace_ != null)
        {
            _rBrace_.parent(null);
        }

        if (node != null)
        {
            if (node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _rBrace_ = node;
    }

    public String toString()
    {
        return ""
            + toString(_start_)
            + toString(_modeName_)
            + toString(_lBrace_)
            + toString(_modeDeclarationList_)
            + toString(_rBrace_);
    }

    void removeChild(Node child)
    {
        if (_start_ == child)
        {
            _start_ = null;
            return;
        }

        if (_modeName_ == child)
        {
            _modeName_ = null;
            return;
        }

        if (_lBrace_ == child)
        {
            _lBrace_ = null;
            return;
        }

        if (_modeDeclarationList_.remove(child))
        {
            return;
        }

        if (_rBrace_ == child)
        {
            _rBrace_ = null;
            return;
        }

    }

    void replaceChild(Node oldChild, Node newChild)
    {
        if (_start_ == oldChild)
        {
            setStart((TStart) newChild);
            return;
        }

        if (_modeName_ == oldChild)
        {
            setModeName((TIdent) newChild);
            return;
        }

        if (_lBrace_ == oldChild)
        {
            setLBrace((TLBrace) newChild);
            return;
        }

        for (ListIterator i = _modeDeclarationList_.listIterator(); i.hasNext();)
        {
            if (i.next() == oldChild)
            {
                if (newChild != null)
                {
                    i.set(newChild);
                    oldChild.parent(null);
                    return;
                }

                i.remove();
                oldChild.parent(null);
                return;
            }
        }

        if (_rBrace_ == oldChild)
        {
            setRBrace((TRBrace) newChild);
            return;
        }

    }

    private class ModeDeclarationList_Cast implements Cast
    {
        public Object cast(Object o)
        {
            PModeDeclaration node = (PModeDeclaration) o;

            if ((node.parent() != null) &&
                (node.parent() != AModeDeclarationSequence.this))
            {
                node.parent().removeChild(node);
            }

            if ((node.parent() == null) ||
                (node.parent() != AModeDeclarationSequence.this))
            {
                node.parent(AModeDeclarationSequence.this);
            }

            return node;
        }
    }
}
