/* This file was generated by SableCC (http://www.sablecc.org/). */

package giotto.giottoc.node;

import giotto.giottoc.analysis.Analysis;

public final class ATimeslotDeclarationTail extends PTimeslotDeclarationTail
{
    private TComma _comma_;
    private PTimeslotDeclaration _timeslotDeclaration_;

    public ATimeslotDeclarationTail()
    {
    }

    public ATimeslotDeclarationTail(
        TComma _comma_,
        PTimeslotDeclaration _timeslotDeclaration_)
    {
        setComma(_comma_);

        setTimeslotDeclaration(_timeslotDeclaration_);

    }
    public Object clone()
    {
        return new ATimeslotDeclarationTail(
            (TComma) cloneNode(_comma_),
            (PTimeslotDeclaration) cloneNode(_timeslotDeclaration_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseATimeslotDeclarationTail(this);
    }

    public TComma getComma()
    {
        return _comma_;
    }

    public void setComma(TComma node)
    {
        if (_comma_ != null)
        {
            _comma_.parent(null);
        }

        if (node != null)
        {
            if (node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _comma_ = node;
    }

    public PTimeslotDeclaration getTimeslotDeclaration()
    {
        return _timeslotDeclaration_;
    }

    public void setTimeslotDeclaration(PTimeslotDeclaration node)
    {
        if (_timeslotDeclaration_ != null)
        {
            _timeslotDeclaration_.parent(null);
        }

        if (node != null)
        {
            if (node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _timeslotDeclaration_ = node;
    }

    public String toString()
    {
        return ""
            + toString(_comma_)
            + toString(_timeslotDeclaration_);
    }

    void removeChild(Node child)
    {
        if (_comma_ == child)
        {
            _comma_ = null;
            return;
        }

        if (_timeslotDeclaration_ == child)
        {
            _timeslotDeclaration_ = null;
            return;
        }

    }

    void replaceChild(Node oldChild, Node newChild)
    {
        if (_comma_ == oldChild)
        {
            setComma((TComma) newChild);
            return;
        }

        if (_timeslotDeclaration_ == oldChild)
        {
            setTimeslotDeclaration((PTimeslotDeclaration) newChild);
            return;
        }

    }
}
