/* This file was generated by SableCC (http://www.sablecc.org/). */

package giotto.giottoc.node;

import giotto.giottoc.analysis.Analysis;

import java.util.LinkedList;
import java.util.List;
import java.util.ListIterator;

public final class AConcreteModuleDeclarationList extends PModuleDeclarationList
{
    private PModuleDeclaration _moduleDeclaration_;
    private final LinkedList _moduleDeclarationTail_ = new TypedLinkedList(new ModuleDeclarationTail_Cast());

    public AConcreteModuleDeclarationList()
    {
    }

    public AConcreteModuleDeclarationList(
        PModuleDeclaration _moduleDeclaration_,
        List _moduleDeclarationTail_)
    {
        setModuleDeclaration(_moduleDeclaration_);

        {
            this._moduleDeclarationTail_.clear();
            this._moduleDeclarationTail_.addAll(_moduleDeclarationTail_);
        }

    }

    public AConcreteModuleDeclarationList(
        PModuleDeclaration _moduleDeclaration_,
        XPModuleDeclarationTail _moduleDeclarationTail_)
    {
        setModuleDeclaration(_moduleDeclaration_);

        if (_moduleDeclarationTail_ != null)
        {
            while (_moduleDeclarationTail_ instanceof X1PModuleDeclarationTail)
            {
                this._moduleDeclarationTail_.addFirst(((X1PModuleDeclarationTail) _moduleDeclarationTail_).getPModuleDeclarationTail());
                _moduleDeclarationTail_ = ((X1PModuleDeclarationTail) _moduleDeclarationTail_).getXPModuleDeclarationTail();
            }
            this._moduleDeclarationTail_.addFirst(((X2PModuleDeclarationTail) _moduleDeclarationTail_).getPModuleDeclarationTail());
        }

    }
    public Object clone()
    {
        return new AConcreteModuleDeclarationList(
            (PModuleDeclaration) cloneNode(_moduleDeclaration_),
            cloneList(_moduleDeclarationTail_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAConcreteModuleDeclarationList(this);
    }

    public PModuleDeclaration getModuleDeclaration()
    {
        return _moduleDeclaration_;
    }

    public void setModuleDeclaration(PModuleDeclaration node)
    {
        if (_moduleDeclaration_ != null)
        {
            _moduleDeclaration_.parent(null);
        }

        if (node != null)
        {
            if (node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _moduleDeclaration_ = node;
    }

    public LinkedList getModuleDeclarationTail()
    {
        return _moduleDeclarationTail_;
    }

    public void setModuleDeclarationTail(List list)
    {
        _moduleDeclarationTail_.clear();
        _moduleDeclarationTail_.addAll(list);
    }

    public String toString()
    {
        return ""
            + toString(_moduleDeclaration_)
            + toString(_moduleDeclarationTail_);
    }

    void removeChild(Node child)
    {
        if (_moduleDeclaration_ == child)
        {
            _moduleDeclaration_ = null;
            return;
        }

        if (_moduleDeclarationTail_.remove(child))
        {
            return;
        }

    }

    void replaceChild(Node oldChild, Node newChild)
    {
        if (_moduleDeclaration_ == oldChild)
        {
            setModuleDeclaration((PModuleDeclaration) newChild);
            return;
        }

        for (ListIterator i = _moduleDeclarationTail_.listIterator(); i.hasNext();)
        {
            if (i.next() == oldChild)
            {
                if (newChild != null)
                {
                    i.set(newChild);
                    oldChild.parent(null);
                    return;
                }

                i.remove();
                oldChild.parent(null);
                return;
            }
        }

    }

    private class ModuleDeclarationTail_Cast implements Cast
    {
        public Object cast(Object o)
        {
            PModuleDeclarationTail node = (PModuleDeclarationTail) o;

            if ((node.parent() != null) &&
                (node.parent() != AConcreteModuleDeclarationList.this))
            {
                node.parent().removeChild(node);
            }

            if ((node.parent() == null) ||
                (node.parent() != AConcreteModuleDeclarationList.this))
            {
                node.parent(AConcreteModuleDeclarationList.this);
            }

            return node;
        }
    }
}
