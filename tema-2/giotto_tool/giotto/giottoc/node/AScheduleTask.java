/* This file was generated by SableCC (http://www.sablecc.org/). */

package giotto.giottoc.node;

import giotto.giottoc.analysis.Analysis;

public final class AScheduleTask extends PScheduleTask
{
    private TSchedule _schedule_;
    private TIdent _taskImplementation_;
    private PActualScopedParameters _taskParameters_;

    public AScheduleTask()
    {
    }

    public AScheduleTask(
        TSchedule _schedule_,
        TIdent _taskImplementation_,
        PActualScopedParameters _taskParameters_)
    {
        setSchedule(_schedule_);

        setTaskImplementation(_taskImplementation_);

        setTaskParameters(_taskParameters_);

    }
    public Object clone()
    {
        return new AScheduleTask(
            (TSchedule) cloneNode(_schedule_),
            (TIdent) cloneNode(_taskImplementation_),
            (PActualScopedParameters) cloneNode(_taskParameters_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAScheduleTask(this);
    }

    public TSchedule getSchedule()
    {
        return _schedule_;
    }

    public void setSchedule(TSchedule node)
    {
        if (_schedule_ != null)
        {
            _schedule_.parent(null);
        }

        if (node != null)
        {
            if (node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _schedule_ = node;
    }

    public TIdent getTaskImplementation()
    {
        return _taskImplementation_;
    }

    public void setTaskImplementation(TIdent node)
    {
        if (_taskImplementation_ != null)
        {
            _taskImplementation_.parent(null);
        }

        if (node != null)
        {
            if (node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _taskImplementation_ = node;
    }

    public PActualScopedParameters getTaskParameters()
    {
        return _taskParameters_;
    }

    public void setTaskParameters(PActualScopedParameters node)
    {
        if (_taskParameters_ != null)
        {
            _taskParameters_.parent(null);
        }

        if (node != null)
        {
            if (node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _taskParameters_ = node;
    }

    public String toString()
    {
        return ""
            + toString(_schedule_)
            + toString(_taskImplementation_)
            + toString(_taskParameters_);
    }

    void removeChild(Node child)
    {
        if (_schedule_ == child)
        {
            _schedule_ = null;
            return;
        }

        if (_taskImplementation_ == child)
        {
            _taskImplementation_ = null;
            return;
        }

        if (_taskParameters_ == child)
        {
            _taskParameters_ = null;
            return;
        }

    }

    void replaceChild(Node oldChild, Node newChild)
    {
        if (_schedule_ == oldChild)
        {
            setSchedule((TSchedule) newChild);
            return;
        }

        if (_taskImplementation_ == oldChild)
        {
            setTaskImplementation((TIdent) newChild);
            return;
        }

        if (_taskParameters_ == oldChild)
        {
            setTaskParameters((PActualScopedParameters) newChild);
            return;
        }

    }
}
