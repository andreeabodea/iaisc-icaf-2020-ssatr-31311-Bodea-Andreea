/* This file was generated by SableCC (http://www.sablecc.org/). */

package giotto.giottoc.node;

import giotto.giottoc.analysis.Analysis;

import java.util.LinkedList;
import java.util.List;
import java.util.ListIterator;

public final class AConcreteScheduleConnectionList extends PScheduleConnectionList
{
    private PScheduleConnection _scheduleConnection_;
    private final LinkedList _scheduleConnectionTail_ = new TypedLinkedList(new ScheduleConnectionTail_Cast());

    public AConcreteScheduleConnectionList()
    {
    }

    public AConcreteScheduleConnectionList(
        PScheduleConnection _scheduleConnection_,
        List _scheduleConnectionTail_)
    {
        setScheduleConnection(_scheduleConnection_);

        {
            this._scheduleConnectionTail_.clear();
            this._scheduleConnectionTail_.addAll(_scheduleConnectionTail_);
        }

    }

    public AConcreteScheduleConnectionList(
        PScheduleConnection _scheduleConnection_,
        XPScheduleConnectionTail _scheduleConnectionTail_)
    {
        setScheduleConnection(_scheduleConnection_);

        if (_scheduleConnectionTail_ != null)
        {
            while (_scheduleConnectionTail_ instanceof X1PScheduleConnectionTail)
            {
                this._scheduleConnectionTail_.addFirst(((X1PScheduleConnectionTail) _scheduleConnectionTail_).getPScheduleConnectionTail());
                _scheduleConnectionTail_ = ((X1PScheduleConnectionTail) _scheduleConnectionTail_).getXPScheduleConnectionTail();
            }
            this._scheduleConnectionTail_.addFirst(((X2PScheduleConnectionTail) _scheduleConnectionTail_).getPScheduleConnectionTail());
        }

    }
    public Object clone()
    {
        return new AConcreteScheduleConnectionList(
            (PScheduleConnection) cloneNode(_scheduleConnection_),
            cloneList(_scheduleConnectionTail_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAConcreteScheduleConnectionList(this);
    }

    public PScheduleConnection getScheduleConnection()
    {
        return _scheduleConnection_;
    }

    public void setScheduleConnection(PScheduleConnection node)
    {
        if (_scheduleConnection_ != null)
        {
            _scheduleConnection_.parent(null);
        }

        if (node != null)
        {
            if (node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _scheduleConnection_ = node;
    }

    public LinkedList getScheduleConnectionTail()
    {
        return _scheduleConnectionTail_;
    }

    public void setScheduleConnectionTail(List list)
    {
        _scheduleConnectionTail_.clear();
        _scheduleConnectionTail_.addAll(list);
    }

    public String toString()
    {
        return ""
            + toString(_scheduleConnection_)
            + toString(_scheduleConnectionTail_);
    }

    void removeChild(Node child)
    {
        if (_scheduleConnection_ == child)
        {
            _scheduleConnection_ = null;
            return;
        }

        if (_scheduleConnectionTail_.remove(child))
        {
            return;
        }

    }

    void replaceChild(Node oldChild, Node newChild)
    {
        if (_scheduleConnection_ == oldChild)
        {
            setScheduleConnection((PScheduleConnection) newChild);
            return;
        }

        for (ListIterator i = _scheduleConnectionTail_.listIterator(); i.hasNext();)
        {
            if (i.next() == oldChild)
            {
                if (newChild != null)
                {
                    i.set(newChild);
                    oldChild.parent(null);
                    return;
                }

                i.remove();
                oldChild.parent(null);
                return;
            }
        }

    }

    private class ScheduleConnectionTail_Cast implements Cast
    {
        public Object cast(Object o)
        {
            PScheduleConnectionTail node = (PScheduleConnectionTail) o;

            if ((node.parent() != null) &&
                (node.parent() != AConcreteScheduleConnectionList.this))
            {
                node.parent().removeChild(node);
            }

            if ((node.parent() == null) ||
                (node.parent() != AConcreteScheduleConnectionList.this))
            {
                node.parent(AConcreteScheduleConnectionList.this);
            }

            return node;
        }
    }
}
