/* This file was generated by SableCC (http://www.sablecc.org/). */

package giotto.giottoc.node;

import giotto.giottoc.analysis.Analysis;

public final class AHostTail extends PHostTail
{
    private TComma _comma_;
    private PHostNameIdent _hostNameIdent_;

    public AHostTail()
    {
    }

    public AHostTail(
        TComma _comma_,
        PHostNameIdent _hostNameIdent_)
    {
        setComma(_comma_);

        setHostNameIdent(_hostNameIdent_);

    }
    public Object clone()
    {
        return new AHostTail(
            (TComma) cloneNode(_comma_),
            (PHostNameIdent) cloneNode(_hostNameIdent_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAHostTail(this);
    }

    public TComma getComma()
    {
        return _comma_;
    }

    public void setComma(TComma node)
    {
        if (_comma_ != null)
        {
            _comma_.parent(null);
        }

        if (node != null)
        {
            if (node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _comma_ = node;
    }

    public PHostNameIdent getHostNameIdent()
    {
        return _hostNameIdent_;
    }

    public void setHostNameIdent(PHostNameIdent node)
    {
        if (_hostNameIdent_ != null)
        {
            _hostNameIdent_.parent(null);
        }

        if (node != null)
        {
            if (node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _hostNameIdent_ = node;
    }

    public String toString()
    {
        return ""
            + toString(_comma_)
            + toString(_hostNameIdent_);
    }

    void removeChild(Node child)
    {
        if (_comma_ == child)
        {
            _comma_ = null;
            return;
        }

        if (_hostNameIdent_ == child)
        {
            _hostNameIdent_ = null;
            return;
        }

    }

    void replaceChild(Node oldChild, Node newChild)
    {
        if (_comma_ == oldChild)
        {
            setComma((TComma) newChild);
            return;
        }

        if (_hostNameIdent_ == oldChild)
        {
            setHostNameIdent((PHostNameIdent) newChild);
            return;
        }

    }
}
