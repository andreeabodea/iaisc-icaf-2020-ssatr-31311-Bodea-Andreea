/* This file was generated by SableCC (http://www.sablecc.org/). */

package giotto.giottoc.node;

import giotto.giottoc.analysis.Analysis;

public final class ATaskPriority extends PTaskPriority
{
    private TPriority _priority_;
    private TIdent _priorityName_;

    public ATaskPriority()
    {
    }

    public ATaskPriority(
        TPriority _priority_,
        TIdent _priorityName_)
    {
        setPriority(_priority_);

        setPriorityName(_priorityName_);

    }
    public Object clone()
    {
        return new ATaskPriority(
            (TPriority) cloneNode(_priority_),
            (TIdent) cloneNode(_priorityName_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseATaskPriority(this);
    }

    public TPriority getPriority()
    {
        return _priority_;
    }

    public void setPriority(TPriority node)
    {
        if (_priority_ != null)
        {
            _priority_.parent(null);
        }

        if (node != null)
        {
            if (node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _priority_ = node;
    }

    public TIdent getPriorityName()
    {
        return _priorityName_;
    }

    public void setPriorityName(TIdent node)
    {
        if (_priorityName_ != null)
        {
            _priorityName_.parent(null);
        }

        if (node != null)
        {
            if (node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _priorityName_ = node;
    }

    public String toString()
    {
        return ""
            + toString(_priority_)
            + toString(_priorityName_);
    }

    void removeChild(Node child)
    {
        if (_priority_ == child)
        {
            _priority_ = null;
            return;
        }

        if (_priorityName_ == child)
        {
            _priorityName_ = null;
            return;
        }

    }

    void replaceChild(Node oldChild, Node newChild)
    {
        if (_priority_ == oldChild)
        {
            setPriority((TPriority) newChild);
            return;
        }

        if (_priorityName_ == oldChild)
        {
            setPriorityName((TIdent) newChild);
            return;
        }

    }
}
