/* This file was generated by SableCC (http://www.sablecc.org/). */

package giotto.giottoc.node;

import giotto.giottoc.analysis.Analysis;

import java.util.LinkedList;
import java.util.List;
import java.util.ListIterator;

public final class AModuleDeclarationList extends PModuleDeclarationList
{
    private final LinkedList _moduleDeclaration_ = new TypedLinkedList(new ModuleDeclaration_Cast());

    public AModuleDeclarationList()
    {
    }

    public AModuleDeclarationList(
        List _moduleDeclaration_)
    {
        {
            this._moduleDeclaration_.clear();
            this._moduleDeclaration_.addAll(_moduleDeclaration_);
        }

    }

    public AModuleDeclarationList(
        XPModuleDeclaration _moduleDeclaration_)
    {
        if (_moduleDeclaration_ != null)
        {
            while (_moduleDeclaration_ instanceof X1PModuleDeclaration)
            {
                this._moduleDeclaration_.addFirst(((X1PModuleDeclaration) _moduleDeclaration_).getPModuleDeclaration());
                _moduleDeclaration_ = ((X1PModuleDeclaration) _moduleDeclaration_).getXPModuleDeclaration();
            }
            this._moduleDeclaration_.addFirst(((X2PModuleDeclaration) _moduleDeclaration_).getPModuleDeclaration());
        }

    }
    public Object clone()
    {
        return new AModuleDeclarationList(
            cloneList(_moduleDeclaration_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAModuleDeclarationList(this);
    }

    public LinkedList getModuleDeclaration()
    {
        return _moduleDeclaration_;
    }

    public void setModuleDeclaration(List list)
    {
        _moduleDeclaration_.clear();
        _moduleDeclaration_.addAll(list);
    }

    public String toString()
    {
        return ""
            + toString(_moduleDeclaration_);
    }

    void removeChild(Node child)
    {
        if (_moduleDeclaration_.remove(child))
        {
            return;
        }

    }

    void replaceChild(Node oldChild, Node newChild)
    {
        for (ListIterator i = _moduleDeclaration_.listIterator(); i.hasNext();)
        {
            if (i.next() == oldChild)
            {
                if (newChild != null)
                {
                    i.set(newChild);
                    oldChild.parent(null);
                    return;
                }

                i.remove();
                oldChild.parent(null);
                return;
            }
        }

    }

    private class ModuleDeclaration_Cast implements Cast
    {
        public Object cast(Object o)
        {
            PModuleDeclaration node = (PModuleDeclaration) o;

            if ((node.parent() != null) &&
                (node.parent() != AModuleDeclarationList.this))
            {
                node.parent().removeChild(node);
            }

            if ((node.parent() == null) ||
                (node.parent() != AModuleDeclarationList.this))
            {
                node.parent(AModuleDeclarationList.this);
            }

            return node;
        }
    }
}
