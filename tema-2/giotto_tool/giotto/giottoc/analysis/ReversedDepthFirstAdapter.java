/* This file was generated by SableCC (http://www.sablecc.org/). */

package giotto.giottoc.analysis;

import giotto.giottoc.node.*;

/**
 * @author M.A.A. Sanvido
 * @version ReversedDepthFirstAdapter.java,v 1.6 2004/10/01 01:10:03 cxh Exp
 * @since Giotto 1.0.1
 */
public class ReversedDepthFirstAdapter extends AnalysisAdapter
{
    public void inStart(Start node)
    {
        defaultIn(node);
    }

    public void outStart(Start node)
    {
        defaultOut(node);
    }

    public void defaultIn(Node node)
    {
    }

    public void defaultOut(Node node)
    {
    }

    public void caseStart(Start node)
    {
        inStart(node);
        node.getEOF().apply(this);
        node.getPProgram().apply(this);
        outStart(node);
    }

    public void inAProgram(AProgram node)
    {
        defaultIn(node);
    }

    public void outAProgram(AProgram node)
    {
        defaultOut(node);
    }

    public void caseAProgram(AProgram node)
    {
        inAProgram(node);
        if (node.getModeDeclarationSequence() != null)
            {
                node.getModeDeclarationSequence().apply(this);
            }
        {
            Object temp[] = node.getDriverDeclarationList().toArray();
            for (int i = temp.length - 1; i >= 0; i--)
                {
                    ((PDriverDeclaration) temp[i]).apply(this);
                }
        }
        {
            Object temp[] = node.getTaskDeclarationList().toArray();
            for (int i = temp.length - 1; i >= 0; i--)
                {
                    ((PTaskDeclaration) temp[i]).apply(this);
                }
        }
        if (node.getOutputDeclarationSequence() != null)
            {
                node.getOutputDeclarationSequence().apply(this);
            }
        if (node.getActuatorDeclarationSequence() != null)
            {
                node.getActuatorDeclarationSequence().apply(this);
            }
        if (node.getSensorDeclarationSequence() != null)
            {
                node.getSensorDeclarationSequence().apply(this);
            }
        if (node.getTypeDeclarationSequence() != null)
            {
                node.getTypeDeclarationSequence().apply(this);
            }
        if (node.getModuleDeclarationSequence() != null)
            {
                node.getModuleDeclarationSequence().apply(this);
            }
        if (node.getHardwareAnnotation() != null)
            {
                node.getHardwareAnnotation().apply(this);
            }
        outAProgram(node);
    }

    public void inAModuleDeclarationSequence(AModuleDeclarationSequence node)
    {
        defaultIn(node);
    }

    public void outAModuleDeclarationSequence(AModuleDeclarationSequence node)
    {
        defaultOut(node);
    }

    public void caseAModuleDeclarationSequence(AModuleDeclarationSequence node)
    {
        inAModuleDeclarationSequence(node);
        if (node.getSemicolon() != null)
            {
                node.getSemicolon().apply(this);
            }
        if (node.getModuleDeclarationList() != null)
            {
                node.getModuleDeclarationList().apply(this);
            }
        if (node.getModule() != null)
            {
                node.getModule().apply(this);
            }
        outAModuleDeclarationSequence(node);
    }

    public void inAConcreteModuleDeclarationList(AConcreteModuleDeclarationList node)
    {
        defaultIn(node);
    }

    public void outAConcreteModuleDeclarationList(AConcreteModuleDeclarationList node)
    {
        defaultOut(node);
    }

    public void caseAConcreteModuleDeclarationList(AConcreteModuleDeclarationList node)
    {
        inAConcreteModuleDeclarationList(node);
        {
            Object temp[] = node.getModuleDeclarationTail().toArray();
            for (int i = temp.length - 1; i >= 0; i--)
                {
                    ((PModuleDeclarationTail) temp[i]).apply(this);
                }
        }
        if (node.getModuleDeclaration() != null)
            {
                node.getModuleDeclaration().apply(this);
            }
        outAConcreteModuleDeclarationList(node);
    }

    public void inAModuleDeclarationList(AModuleDeclarationList node)
    {
        defaultIn(node);
    }

    public void outAModuleDeclarationList(AModuleDeclarationList node)
    {
        defaultOut(node);
    }

    public void caseAModuleDeclarationList(AModuleDeclarationList node)
    {
        inAModuleDeclarationList(node);
        {
            Object temp[] = node.getModuleDeclaration().toArray();
            for (int i = temp.length - 1; i >= 0; i--)
                {
                    ((PModuleDeclaration) temp[i]).apply(this);
                }
        }
        outAModuleDeclarationList(node);
    }

    public void inAModuleDeclarationTail(AModuleDeclarationTail node)
    {
        defaultIn(node);
    }

    public void outAModuleDeclarationTail(AModuleDeclarationTail node)
    {
        defaultOut(node);
    }

    public void caseAModuleDeclarationTail(AModuleDeclarationTail node)
    {
        inAModuleDeclarationTail(node);
        if (node.getModuleDeclaration() != null)
            {
                node.getModuleDeclaration().apply(this);
            }
        if (node.getComma() != null)
            {
                node.getComma().apply(this);
            }
        outAModuleDeclarationTail(node);
    }

    public void inAModuleDeclaration(AModuleDeclaration node)
    {
        defaultIn(node);
    }

    public void outAModuleDeclaration(AModuleDeclaration node)
    {
        defaultOut(node);
    }

    public void caseAModuleDeclaration(AModuleDeclaration node)
    {
        inAModuleDeclaration(node);
        if (node.getModuleName() != null)
            {
                node.getModuleName().apply(this);
            }
        outAModuleDeclaration(node);
    }

    public void inAConcreteQualident(AConcreteQualident node)
    {
        defaultIn(node);
    }

    public void outAConcreteQualident(AConcreteQualident node)
    {
        defaultOut(node);
    }

    public void caseAConcreteQualident(AConcreteQualident node)
    {
        inAConcreteQualident(node);
        {
            Object temp[] = node.getQualidentTail().toArray();
            for (int i = temp.length - 1; i >= 0; i--)
                {
                    ((PQualidentTail) temp[i]).apply(this);
                }
        }
        if (node.getIdent() != null)
            {
                node.getIdent().apply(this);
            }
        outAConcreteQualident(node);
    }

    public void inAQualident(AQualident node)
    {
        defaultIn(node);
    }

    public void outAQualident(AQualident node)
    {
        defaultOut(node);
    }

    public void caseAQualident(AQualident node)
    {
        inAQualident(node);
        {
            Object temp[] = node.getIdent().toArray();
            for (int i = temp.length - 1; i >= 0; i--)
                {
                    ((TIdent) temp[i]).apply(this);
                }
        }
        outAQualident(node);
    }

    public void inAQualidentTail(AQualidentTail node)
    {
        defaultIn(node);
    }

    public void outAQualidentTail(AQualidentTail node)
    {
        defaultOut(node);
    }

    public void caseAQualidentTail(AQualidentTail node)
    {
        inAQualidentTail(node);
        if (node.getIdent() != null)
            {
                node.getIdent().apply(this);
            }
        if (node.getDot() != null)
            {
                node.getDot().apply(this);
            }
        outAQualidentTail(node);
    }

    public void inATypeDeclarationSequence(ATypeDeclarationSequence node)
    {
        defaultIn(node);
    }

    public void outATypeDeclarationSequence(ATypeDeclarationSequence node)
    {
        defaultOut(node);
    }

    public void caseATypeDeclarationSequence(ATypeDeclarationSequence node)
    {
        inATypeDeclarationSequence(node);
        {
            Object temp[] = node.getTypeDeclarationList().toArray();
            for (int i = temp.length - 1; i >= 0; i--)
                {
                    ((PTypeDeclaration) temp[i]).apply(this);
                }
        }
        if (node.getType() != null)
            {
                node.getType().apply(this);
            }
        outATypeDeclarationSequence(node);
    }

    public void inATypeDeclaration(ATypeDeclaration node)
    {
        defaultIn(node);
    }

    public void outATypeDeclaration(ATypeDeclaration node)
    {
        defaultOut(node);
    }

    public void caseATypeDeclaration(ATypeDeclaration node)
    {
        inATypeDeclaration(node);
        if (node.getSemicolon() != null)
            {
                node.getSemicolon().apply(this);
            }
        if (node.getExternalTypeName() != null)
            {
                node.getExternalTypeName().apply(this);
            }
        if (node.getIs() != null)
            {
                node.getIs().apply(this);
            }
        if (node.getTypeName() != null)
            {
                node.getTypeName().apply(this);
            }
        outATypeDeclaration(node);
    }

    public void inASensorDeclarationSequence(ASensorDeclarationSequence node)
    {
        defaultIn(node);
    }

    public void outASensorDeclarationSequence(ASensorDeclarationSequence node)
    {
        defaultOut(node);
    }

    public void caseASensorDeclarationSequence(ASensorDeclarationSequence node)
    {
        inASensorDeclarationSequence(node);
        {
            Object temp[] = node.getSensorDeclarationList().toArray();
            for (int i = temp.length - 1; i >= 0; i--)
                {
                    ((PSensorDeclaration) temp[i]).apply(this);
                }
        }
        if (node.getSensor() != null)
            {
                node.getSensor().apply(this);
            }
        outASensorDeclarationSequence(node);
    }

    public void inASensorDeclaration(ASensorDeclaration node)
    {
        defaultIn(node);
    }

    public void outASensorDeclaration(ASensorDeclaration node)
    {
        defaultOut(node);
    }

    public void caseASensorDeclaration(ASensorDeclaration node)
    {
        inASensorDeclaration(node);
        if (node.getSemicolon() != null)
            {
                node.getSemicolon().apply(this);
            }
        if (node.getPortAnnotation() != null)
            {
                node.getPortAnnotation().apply(this);
            }
        if (node.getDeviceDriver() != null)
            {
                node.getDeviceDriver().apply(this);
            }
        if (node.getPortName() != null)
            {
                node.getPortName().apply(this);
            }
        if (node.getTypeName() != null)
            {
                node.getTypeName().apply(this);
            }
        outASensorDeclaration(node);
    }

    public void inADeviceDriver(ADeviceDriver node)
    {
        defaultIn(node);
    }

    public void outADeviceDriver(ADeviceDriver node)
    {
        defaultOut(node);
    }

    public void caseADeviceDriver(ADeviceDriver node)
    {
        inADeviceDriver(node);
        if (node.getDeviceDriverName() != null)
            {
                node.getDeviceDriverName().apply(this);
            }
        if (node.getUses() != null)
            {
                node.getUses().apply(this);
            }
        outADeviceDriver(node);
    }

    public void inAActuatorDeclarationSequence(AActuatorDeclarationSequence node)
    {
        defaultIn(node);
    }

    public void outAActuatorDeclarationSequence(AActuatorDeclarationSequence node)
    {
        defaultOut(node);
    }

    public void caseAActuatorDeclarationSequence(AActuatorDeclarationSequence node)
    {
        inAActuatorDeclarationSequence(node);
        {
            Object temp[] = node.getActuatorDeclarationList().toArray();
            for (int i = temp.length - 1; i >= 0; i--)
                {
                    ((PActuatorDeclaration) temp[i]).apply(this);
                }
        }
        if (node.getActuator() != null)
            {
                node.getActuator().apply(this);
            }
        outAActuatorDeclarationSequence(node);
    }

    public void inAActuatorDeclaration(AActuatorDeclaration node)
    {
        defaultIn(node);
    }

    public void outAActuatorDeclaration(AActuatorDeclaration node)
    {
        defaultOut(node);
    }

    public void caseAActuatorDeclaration(AActuatorDeclaration node)
    {
        inAActuatorDeclaration(node);
        if (node.getSemicolon() != null)
            {
                node.getSemicolon().apply(this);
            }
        if (node.getPortAnnotation() != null)
            {
                node.getPortAnnotation().apply(this);
            }
        if (node.getDeviceDriver() != null)
            {
                node.getDeviceDriver().apply(this);
            }
        if (node.getPortName() != null)
            {
                node.getPortName().apply(this);
            }
        if (node.getTypeName() != null)
            {
                node.getTypeName().apply(this);
            }
        outAActuatorDeclaration(node);
    }

    public void inAOutputDeclarationSequence(AOutputDeclarationSequence node)
    {
        defaultIn(node);
    }

    public void outAOutputDeclarationSequence(AOutputDeclarationSequence node)
    {
        defaultOut(node);
    }

    public void caseAOutputDeclarationSequence(AOutputDeclarationSequence node)
    {
        inAOutputDeclarationSequence(node);
        {
            Object temp[] = node.getOutputDeclarationList().toArray();
            for (int i = temp.length - 1; i >= 0; i--)
                {
                    ((POutputDeclaration) temp[i]).apply(this);
                }
        }
        if (node.getOutput() != null)
            {
                node.getOutput().apply(this);
            }
        outAOutputDeclarationSequence(node);
    }

    public void inAOutputDeclaration(AOutputDeclaration node)
    {
        defaultIn(node);
    }

    public void outAOutputDeclaration(AOutputDeclaration node)
    {
        defaultOut(node);
    }

    public void caseAOutputDeclaration(AOutputDeclaration node)
    {
        inAOutputDeclaration(node);
        if (node.getSemicolon() != null)
            {
                node.getSemicolon().apply(this);
            }
        if (node.getInitializationDriver() != null)
            {
                node.getInitializationDriver().apply(this);
            }
        if (node.getAssign() != null)
            {
                node.getAssign().apply(this);
            }
        if (node.getPortName() != null)
            {
                node.getPortName().apply(this);
            }
        if (node.getTypeName() != null)
            {
                node.getTypeName().apply(this);
            }
        outAOutputDeclaration(node);
    }

    public void inATaskDeclaration(ATaskDeclaration node)
    {
        defaultIn(node);
    }

    public void outATaskDeclaration(ATaskDeclaration node)
    {
        defaultOut(node);
    }

    public void caseATaskDeclaration(ATaskDeclaration node)
    {
        inATaskDeclaration(node);
        if (node.getRBrace() != null)
            {
                node.getRBrace().apply(this);
            }
        if (node.getTaskTimingAnnotation() != null)
            {
                node.getTaskTimingAnnotation().apply(this);
            }
        if (node.getScheduleTask() != null)
            {
                node.getScheduleTask().apply(this);
            }
        if (node.getLBrace() != null)
            {
                node.getLBrace().apply(this);
            }
        if (node.getTaskWcetAnnotation() != null)
            {
                node.getTaskWcetAnnotation().apply(this);
            }
        if (node.getStatePorts() != null)
            {
                node.getStatePorts().apply(this);
            }
        if (node.getState() != null)
            {
                node.getState().apply(this);
            }
        if (node.getOutputPorts() != null)
            {
                node.getOutputPorts().apply(this);
            }
        if (node.getOutput() != null)
            {
                node.getOutput().apply(this);
            }
        if (node.getInputPorts() != null)
            {
                node.getInputPorts().apply(this);
            }
        if (node.getTaskName() != null)
            {
                node.getTaskName().apply(this);
            }
        if (node.getTask() != null)
            {
                node.getTask().apply(this);
            }
        outATaskDeclaration(node);
    }

    public void inAFormalPorts(AFormalPorts node)
    {
        defaultIn(node);
    }

    public void outAFormalPorts(AFormalPorts node)
    {
        defaultOut(node);
    }

    public void caseAFormalPorts(AFormalPorts node)
    {
        inAFormalPorts(node);
        if (node.getRPar() != null)
            {
                node.getRPar().apply(this);
            }
        if (node.getFormalPortList() != null)
            {
                node.getFormalPortList().apply(this);
            }
        if (node.getLPar() != null)
            {
                node.getLPar().apply(this);
            }
        outAFormalPorts(node);
    }

    public void inAConcreteFormalPortList(AConcreteFormalPortList node)
    {
        defaultIn(node);
    }

    public void outAConcreteFormalPortList(AConcreteFormalPortList node)
    {
        defaultOut(node);
    }

    public void caseAConcreteFormalPortList(AConcreteFormalPortList node)
    {
        inAConcreteFormalPortList(node);
        {
            Object temp[] = node.getFormalPortTail().toArray();
            for (int i = temp.length - 1; i >= 0; i--)
                {
                    ((PFormalPortTail) temp[i]).apply(this);
                }
        }
        if (node.getFormalPort() != null)
            {
                node.getFormalPort().apply(this);
            }
        outAConcreteFormalPortList(node);
    }

    public void inAFormalPortList(AFormalPortList node)
    {
        defaultIn(node);
    }

    public void outAFormalPortList(AFormalPortList node)
    {
        defaultOut(node);
    }

    public void caseAFormalPortList(AFormalPortList node)
    {
        inAFormalPortList(node);
        {
            Object temp[] = node.getFormalPort().toArray();
            for (int i = temp.length - 1; i >= 0; i--)
                {
                    ((PFormalPort) temp[i]).apply(this);
                }
        }
        outAFormalPortList(node);
    }

    public void inAFormalPortTail(AFormalPortTail node)
    {
        defaultIn(node);
    }

    public void outAFormalPortTail(AFormalPortTail node)
    {
        defaultOut(node);
    }

    public void caseAFormalPortTail(AFormalPortTail node)
    {
        inAFormalPortTail(node);
        if (node.getFormalPort() != null)
            {
                node.getFormalPort().apply(this);
            }
        if (node.getComma() != null)
            {
                node.getComma().apply(this);
            }
        outAFormalPortTail(node);
    }

    public void inAFormalPort(AFormalPort node)
    {
        defaultIn(node);
    }

    public void outAFormalPort(AFormalPort node)
    {
        defaultOut(node);
    }

    public void caseAFormalPort(AFormalPort node)
    {
        inAFormalPort(node);
        if (node.getPortName() != null)
            {
                node.getPortName().apply(this);
            }
        if (node.getTypeName() != null)
            {
                node.getTypeName().apply(this);
            }
        outAFormalPort(node);
    }

    public void inAActualPorts(AActualPorts node)
    {
        defaultIn(node);
    }

    public void outAActualPorts(AActualPorts node)
    {
        defaultOut(node);
    }

    public void caseAActualPorts(AActualPorts node)
    {
        inAActualPorts(node);
        if (node.getRPar() != null)
            {
                node.getRPar().apply(this);
            }
        if (node.getActualPortList() != null)
            {
                node.getActualPortList().apply(this);
            }
        if (node.getLPar() != null)
            {
                node.getLPar().apply(this);
            }
        outAActualPorts(node);
    }

    public void inAConcreteActualPortList(AConcreteActualPortList node)
    {
        defaultIn(node);
    }

    public void outAConcreteActualPortList(AConcreteActualPortList node)
    {
        defaultOut(node);
    }

    public void caseAConcreteActualPortList(AConcreteActualPortList node)
    {
        inAConcreteActualPortList(node);
        {
            Object temp[] = node.getActualPortTail().toArray();
            for (int i = temp.length - 1; i >= 0; i--)
                {
                    ((PActualPortTail) temp[i]).apply(this);
                }
        }
        if (node.getActualPort() != null)
            {
                node.getActualPort().apply(this);
            }
        outAConcreteActualPortList(node);
    }

    public void inAActualPortList(AActualPortList node)
    {
        defaultIn(node);
    }

    public void outAActualPortList(AActualPortList node)
    {
        defaultOut(node);
    }

    public void caseAActualPortList(AActualPortList node)
    {
        inAActualPortList(node);
        {
            Object temp[] = node.getActualPort().toArray();
            for (int i = temp.length - 1; i >= 0; i--)
                {
                    ((PActualPort) temp[i]).apply(this);
                }
        }
        outAActualPortList(node);
    }

    public void inAActualPortTail(AActualPortTail node)
    {
        defaultIn(node);
    }

    public void outAActualPortTail(AActualPortTail node)
    {
        defaultOut(node);
    }

    public void caseAActualPortTail(AActualPortTail node)
    {
        inAActualPortTail(node);
        if (node.getActualPort() != null)
            {
                node.getActualPort().apply(this);
            }
        if (node.getComma() != null)
            {
                node.getComma().apply(this);
            }
        outAActualPortTail(node);
    }

    public void inAActualPort(AActualPort node)
    {
        defaultIn(node);
    }

    public void outAActualPort(AActualPort node)
    {
        defaultOut(node);
    }

    public void caseAActualPort(AActualPort node)
    {
        inAActualPort(node);
        if (node.getPortName() != null)
            {
                node.getPortName().apply(this);
            }
        outAActualPort(node);
    }

    public void inAStatePorts(AStatePorts node)
    {
        defaultIn(node);
    }

    public void outAStatePorts(AStatePorts node)
    {
        defaultOut(node);
    }

    public void caseAStatePorts(AStatePorts node)
    {
        inAStatePorts(node);
        if (node.getRPar() != null)
            {
                node.getRPar().apply(this);
            }
        if (node.getStatePortList() != null)
            {
                node.getStatePortList().apply(this);
            }
        if (node.getLPar() != null)
            {
                node.getLPar().apply(this);
            }
        outAStatePorts(node);
    }

    public void inAConcreteStatePortList(AConcreteStatePortList node)
    {
        defaultIn(node);
    }

    public void outAConcreteStatePortList(AConcreteStatePortList node)
    {
        defaultOut(node);
    }

    public void caseAConcreteStatePortList(AConcreteStatePortList node)
    {
        inAConcreteStatePortList(node);
        {
            Object temp[] = node.getStatePortTail().toArray();
            for (int i = temp.length - 1; i >= 0; i--)
                {
                    ((PStatePortTail) temp[i]).apply(this);
                }
        }
        if (node.getStatePort() != null)
            {
                node.getStatePort().apply(this);
            }
        outAConcreteStatePortList(node);
    }

    public void inAStatePortList(AStatePortList node)
    {
        defaultIn(node);
    }

    public void outAStatePortList(AStatePortList node)
    {
        defaultOut(node);
    }

    public void caseAStatePortList(AStatePortList node)
    {
        inAStatePortList(node);
        {
            Object temp[] = node.getStatePort().toArray();
            for (int i = temp.length - 1; i >= 0; i--)
                {
                    ((PStatePort) temp[i]).apply(this);
                }
        }
        outAStatePortList(node);
    }

    public void inAStatePortTail(AStatePortTail node)
    {
        defaultIn(node);
    }

    public void outAStatePortTail(AStatePortTail node)
    {
        defaultOut(node);
    }

    public void caseAStatePortTail(AStatePortTail node)
    {
        inAStatePortTail(node);
        if (node.getStatePort() != null)
            {
                node.getStatePort().apply(this);
            }
        if (node.getComma() != null)
            {
                node.getComma().apply(this);
            }
        outAStatePortTail(node);
    }

    public void inAStatePort(AStatePort node)
    {
        defaultIn(node);
    }

    public void outAStatePort(AStatePort node)
    {
        defaultOut(node);
    }

    public void caseAStatePort(AStatePort node)
    {
        inAStatePort(node);
        if (node.getInitializationDriver() != null)
            {
                node.getInitializationDriver().apply(this);
            }
        if (node.getAssign() != null)
            {
                node.getAssign().apply(this);
            }
        if (node.getPortName() != null)
            {
                node.getPortName().apply(this);
            }
        if (node.getTypeName() != null)
            {
                node.getTypeName().apply(this);
            }
        outAStatePort(node);
    }

    public void inAScheduleTask(AScheduleTask node)
    {
        defaultIn(node);
    }

    public void outAScheduleTask(AScheduleTask node)
    {
        defaultOut(node);
    }

    public void caseAScheduleTask(AScheduleTask node)
    {
        inAScheduleTask(node);
        if (node.getTaskParameters() != null)
            {
                node.getTaskParameters().apply(this);
            }
        if (node.getTaskImplementation() != null)
            {
                node.getTaskImplementation().apply(this);
            }
        if (node.getSchedule() != null)
            {
                node.getSchedule().apply(this);
            }
        outAScheduleTask(node);
    }

    public void inAActualScopedParameters(AActualScopedParameters node)
    {
        defaultIn(node);
    }

    public void outAActualScopedParameters(AActualScopedParameters node)
    {
        defaultOut(node);
    }

    public void caseAActualScopedParameters(AActualScopedParameters node)
    {
        inAActualScopedParameters(node);
        if (node.getRPar() != null)
            {
                node.getRPar().apply(this);
            }
        if (node.getActualScopedParameterList() != null)
            {
                node.getActualScopedParameterList().apply(this);
            }
        if (node.getLPar() != null)
            {
                node.getLPar().apply(this);
            }
        outAActualScopedParameters(node);
    }

    public void inAConcreteActualScopedParameterList(AConcreteActualScopedParameterList node)
    {
        defaultIn(node);
    }

    public void outAConcreteActualScopedParameterList(AConcreteActualScopedParameterList node)
    {
        defaultOut(node);
    }

    public void caseAConcreteActualScopedParameterList(AConcreteActualScopedParameterList node)
    {
        inAConcreteActualScopedParameterList(node);
        {
            Object temp[] = node.getActualScopedParameterTail().toArray();
            for (int i = temp.length - 1; i >= 0; i--)
                {
                    ((PActualScopedParameterTail) temp[i]).apply(this);
                }
        }
        if (node.getActualScopedParameter() != null)
            {
                node.getActualScopedParameter().apply(this);
            }
        outAConcreteActualScopedParameterList(node);
    }

    public void inAActualScopedParameterList(AActualScopedParameterList node)
    {
        defaultIn(node);
    }

    public void outAActualScopedParameterList(AActualScopedParameterList node)
    {
        defaultOut(node);
    }

    public void caseAActualScopedParameterList(AActualScopedParameterList node)
    {
        inAActualScopedParameterList(node);
        {
            Object temp[] = node.getActualScopedParameter().toArray();
            for (int i = temp.length - 1; i >= 0; i--)
                {
                    ((PActualScopedParameter) temp[i]).apply(this);
                }
        }
        outAActualScopedParameterList(node);
    }

    public void inAActualScopedParameterTail(AActualScopedParameterTail node)
    {
        defaultIn(node);
    }

    public void outAActualScopedParameterTail(AActualScopedParameterTail node)
    {
        defaultOut(node);
    }

    public void caseAActualScopedParameterTail(AActualScopedParameterTail node)
    {
        inAActualScopedParameterTail(node);
        if (node.getActualScopedParameter() != null)
            {
                node.getActualScopedParameter().apply(this);
            }
        if (node.getComma() != null)
            {
                node.getComma().apply(this);
            }
        outAActualScopedParameterTail(node);
    }

    public void inAActualScopedParameter(AActualScopedParameter node)
    {
        defaultIn(node);
    }

    public void outAActualScopedParameter(AActualScopedParameter node)
    {
        defaultOut(node);
    }

    public void caseAActualScopedParameter(AActualScopedParameter node)
    {
        inAActualScopedParameter(node);
        if (node.getParameterName() != null)
            {
                node.getParameterName().apply(this);
            }
        outAActualScopedParameter(node);
    }

    public void inADriverDeclaration(ADriverDeclaration node)
    {
        defaultIn(node);
    }

    public void outADriverDeclaration(ADriverDeclaration node)
    {
        defaultOut(node);
    }

    public void caseADriverDeclaration(ADriverDeclaration node)
    {
        inADriverDeclaration(node);
        if (node.getRBrace() != null)
            {
                node.getRBrace().apply(this);
            }
        if (node.getCallDriver() != null)
            {
                node.getCallDriver().apply(this);
            }
        if (node.getLBrace() != null)
            {
                node.getLBrace().apply(this);
            }
        if (node.getDestinationPorts() != null)
            {
                node.getDestinationPorts().apply(this);
            }
        if (node.getOutput() != null)
            {
                node.getOutput().apply(this);
            }
        if (node.getSourcePorts() != null)
            {
                node.getSourcePorts().apply(this);
            }
        if (node.getDriverName() != null)
            {
                node.getDriverName().apply(this);
            }
        if (node.getDriver() != null)
            {
                node.getDriver().apply(this);
            }
        outADriverDeclaration(node);
    }

    public void inACallDriver(ACallDriver node)
    {
        defaultIn(node);
    }

    public void outACallDriver(ACallDriver node)
    {
        defaultOut(node);
    }

    public void caseACallDriver(ACallDriver node)
    {
        inACallDriver(node);
        if (node.getDriverParameters() != null)
            {
                node.getDriverParameters().apply(this);
            }
        if (node.getDriverImplementation() != null)
            {
                node.getDriverImplementation().apply(this);
            }
        if (node.getThen() != null)
            {
                node.getThen().apply(this);
            }
        if (node.getGuardParameters() != null)
            {
                node.getGuardParameters().apply(this);
            }
        if (node.getGuardImplementation() != null)
            {
                node.getGuardImplementation().apply(this);
            }
        if (node.getIf() != null)
            {
                node.getIf().apply(this);
            }
        outACallDriver(node);
    }

    public void inAGuardParameters(AGuardParameters node)
    {
        defaultIn(node);
    }

    public void outAGuardParameters(AGuardParameters node)
    {
        defaultOut(node);
    }

    public void caseAGuardParameters(AGuardParameters node)
    {
        inAGuardParameters(node);
        if (node.getActualScopedParameters() != null)
            {
                node.getActualScopedParameters().apply(this);
            }
        outAGuardParameters(node);
    }

    public void inAModeDeclarationSequence(AModeDeclarationSequence node)
    {
        defaultIn(node);
    }

    public void outAModeDeclarationSequence(AModeDeclarationSequence node)
    {
        defaultOut(node);
    }

    public void caseAModeDeclarationSequence(AModeDeclarationSequence node)
    {
        inAModeDeclarationSequence(node);
        if (node.getRBrace() != null)
            {
                node.getRBrace().apply(this);
            }
        {
            Object temp[] = node.getModeDeclarationList().toArray();
            for (int i = temp.length - 1; i >= 0; i--)
                {
                    ((PModeDeclaration) temp[i]).apply(this);
                }
        }
        if (node.getLBrace() != null)
            {
                node.getLBrace().apply(this);
            }
        if (node.getModeName() != null)
            {
                node.getModeName().apply(this);
            }
        if (node.getStart() != null)
            {
                node.getStart().apply(this);
            }
        outAModeDeclarationSequence(node);
    }

    public void inAModeDeclaration(AModeDeclaration node)
    {
        defaultIn(node);
    }

    public void outAModeDeclaration(AModeDeclaration node)
    {
        defaultOut(node);
    }

    public void caseAModeDeclaration(AModeDeclaration node)
    {
        inAModeDeclaration(node);
        if (node.getRBrace() != null)
            {
                node.getRBrace().apply(this);
            }
        {
            Object temp[] = node.getTaskInvocationList().toArray();
            for (int i = temp.length - 1; i >= 0; i--)
                {
                    ((PTaskInvocation) temp[i]).apply(this);
                }
        }
        {
            Object temp[] = node.getModeSwitchList().toArray();
            for (int i = temp.length - 1; i >= 0; i--)
                {
                    ((PModeSwitch) temp[i]).apply(this);
                }
        }
        if (node.getModeConnectionAnnotation() != null)
            {
                node.getModeConnectionAnnotation().apply(this);
            }
        {
            Object temp[] = node.getActuatorUpdateList().toArray();
            for (int i = temp.length - 1; i >= 0; i--)
                {
                    ((PActuatorUpdate) temp[i]).apply(this);
                }
        }
        if (node.getLBrace() != null)
            {
                node.getLBrace().apply(this);
            }
        if (node.getModeAnnotation() != null)
            {
                node.getModeAnnotation().apply(this);
            }
        if (node.getModePeriod() != null)
            {
                node.getModePeriod().apply(this);
            }
        if (node.getPeriod() != null)
            {
                node.getPeriod().apply(this);
            }
        if (node.getModePorts() != null)
            {
                node.getModePorts().apply(this);
            }
        if (node.getModeName() != null)
            {
                node.getModeName().apply(this);
            }
        if (node.getMode() != null)
            {
                node.getMode().apply(this);
            }
        outAModeDeclaration(node);
    }

    public void inAActuatorUpdate(AActuatorUpdate node)
    {
        defaultIn(node);
    }

    public void outAActuatorUpdate(AActuatorUpdate node)
    {
        defaultOut(node);
    }

    public void caseAActuatorUpdate(AActuatorUpdate node)
    {
        inAActuatorUpdate(node);
        if (node.getSemicolon() != null)
            {
                node.getSemicolon().apply(this);
            }
        if (node.getRPar() != null)
            {
                node.getRPar().apply(this);
            }
        if (node.getDriverName() != null)
            {
                node.getDriverName().apply(this);
            }
        if (node.getLPar() != null)
            {
                node.getLPar().apply(this);
            }
        if (node.getActuatorPortName() != null)
            {
                node.getActuatorPortName().apply(this);
            }
        if (node.getDo() != null)
            {
                node.getDo().apply(this);
            }
        if (node.getActuatorFrequency() != null)
            {
                node.getActuatorFrequency().apply(this);
            }
        if (node.getActfreq() != null)
            {
                node.getActfreq().apply(this);
            }
        outAActuatorUpdate(node);
    }

    public void inAModeSwitch(AModeSwitch node)
    {
        defaultIn(node);
    }

    public void outAModeSwitch(AModeSwitch node)
    {
        defaultOut(node);
    }

    public void caseAModeSwitch(AModeSwitch node)
    {
        inAModeSwitch(node);
        if (node.getSemicolon() != null)
            {
                node.getSemicolon().apply(this);
            }
        if (node.getModeSwitchAnnotation() != null)
            {
                node.getModeSwitchAnnotation().apply(this);
            }
        if (node.getRPar() != null)
            {
                node.getRPar().apply(this);
            }
        if (node.getDriverName() != null)
            {
                node.getDriverName().apply(this);
            }
        if (node.getLPar() != null)
            {
                node.getLPar().apply(this);
            }
        if (node.getModeName() != null)
            {
                node.getModeName().apply(this);
            }
        if (node.getDo() != null)
            {
                node.getDo().apply(this);
            }
        if (node.getModeSwitchFrequency() != null)
            {
                node.getModeSwitchFrequency().apply(this);
            }
        if (node.getExitfreq() != null)
            {
                node.getExitfreq().apply(this);
            }
        outAModeSwitch(node);
    }

    public void inATaskInvocation(ATaskInvocation node)
    {
        defaultIn(node);
    }

    public void outATaskInvocation(ATaskInvocation node)
    {
        defaultOut(node);
    }

    public void caseATaskInvocation(ATaskInvocation node)
    {
        inATaskInvocation(node);
        if (node.getSemicolon() != null)
            {
                node.getSemicolon().apply(this);
            }
        if (node.getTaskAnnotation() != null)
            {
                node.getTaskAnnotation().apply(this);
            }
        if (node.getRPar() != null)
            {
                node.getRPar().apply(this);
            }
        if (node.getDriverName() != null)
            {
                node.getDriverName().apply(this);
            }
        if (node.getLPar() != null)
            {
                node.getLPar().apply(this);
            }
        if (node.getTaskName() != null)
            {
                node.getTaskName().apply(this);
            }
        if (node.getDo() != null)
            {
                node.getDo().apply(this);
            }
        if (node.getTaskFrequency() != null)
            {
                node.getTaskFrequency().apply(this);
            }
        if (node.getTaskfreq() != null)
            {
                node.getTaskfreq().apply(this);
            }
        outATaskInvocation(node);
    }

    public void inAHardwareAnnotation(AHardwareAnnotation node)
    {
        defaultIn(node);
    }

    public void outAHardwareAnnotation(AHardwareAnnotation node)
    {
        defaultOut(node);
    }

    public void caseAHardwareAnnotation(AHardwareAnnotation node)
    {
        inAHardwareAnnotation(node);
        if (node.getRBracket() != null)
            {
                node.getRBracket().apply(this);
            }
        if (node.getHardwareDeclarationList() != null)
            {
                node.getHardwareDeclarationList().apply(this);
            }
        if (node.getLBracket() != null)
            {
                node.getLBracket().apply(this);
            }
        outAHardwareAnnotation(node);
    }

    public void inAConcreteHardwareDeclarationList(AConcreteHardwareDeclarationList node)
    {
        defaultIn(node);
    }

    public void outAConcreteHardwareDeclarationList(AConcreteHardwareDeclarationList node)
    {
        defaultOut(node);
    }

    public void caseAConcreteHardwareDeclarationList(AConcreteHardwareDeclarationList node)
    {
        inAConcreteHardwareDeclarationList(node);
        {
            Object temp[] = node.getHardwareDeclarationTail().toArray();
            for (int i = temp.length - 1; i >= 0; i--)
                {
                    ((PHardwareDeclarationTail) temp[i]).apply(this);
                }
        }
        if (node.getHardwareDeclaration() != null)
            {
                node.getHardwareDeclaration().apply(this);
            }
        outAConcreteHardwareDeclarationList(node);
    }

    public void inAHardwareDeclarationList(AHardwareDeclarationList node)
    {
        defaultIn(node);
    }

    public void outAHardwareDeclarationList(AHardwareDeclarationList node)
    {
        defaultOut(node);
    }

    public void caseAHardwareDeclarationList(AHardwareDeclarationList node)
    {
        inAHardwareDeclarationList(node);
        {
            Object temp[] = node.getHardwareDeclaration().toArray();
            for (int i = temp.length - 1; i >= 0; i--)
                {
                    ((PHardwareDeclaration) temp[i]).apply(this);
                }
        }
        outAHardwareDeclarationList(node);
    }

    public void inAHardwareDeclarationTail(AHardwareDeclarationTail node)
    {
        defaultIn(node);
    }

    public void outAHardwareDeclarationTail(AHardwareDeclarationTail node)
    {
        defaultOut(node);
    }

    public void caseAHardwareDeclarationTail(AHardwareDeclarationTail node)
    {
        inAHardwareDeclarationTail(node);
        if (node.getHardwareDeclaration() != null)
            {
                node.getHardwareDeclaration().apply(this);
            }
        if (node.getSemicolon() != null)
            {
                node.getSemicolon().apply(this);
            }
        outAHardwareDeclarationTail(node);
    }

    public void inAHostHardwareDeclaration(AHostHardwareDeclaration node)
    {
        defaultIn(node);
    }

    public void outAHostHardwareDeclaration(AHostHardwareDeclaration node)
    {
        defaultOut(node);
    }

    public void caseAHostHardwareDeclaration(AHostHardwareDeclaration node)
    {
        inAHostHardwareDeclaration(node);
        if (node.getHostDeclaration() != null)
            {
                node.getHostDeclaration().apply(this);
            }
        outAHostHardwareDeclaration(node);
    }

    public void inANetworkHardwareDeclaration(ANetworkHardwareDeclaration node)
    {
        defaultIn(node);
    }

    public void outANetworkHardwareDeclaration(ANetworkHardwareDeclaration node)
    {
        defaultOut(node);
    }

    public void caseANetworkHardwareDeclaration(ANetworkHardwareDeclaration node)
    {
        inANetworkHardwareDeclaration(node);
        if (node.getNetworkDeclaration() != null)
            {
                node.getNetworkDeclaration().apply(this);
            }
        outANetworkHardwareDeclaration(node);
    }

    public void inAHostDeclaration(AHostDeclaration node)
    {
        defaultIn(node);
    }

    public void outAHostDeclaration(AHostDeclaration node)
    {
        defaultOut(node);
    }

    public void caseAHostDeclaration(AHostDeclaration node)
    {
        inAHostDeclaration(node);
        if (node.getHostPriorities() != null)
            {
                node.getHostPriorities().apply(this);
            }
        if (node.getHostPort() != null)
            {
                node.getHostPort().apply(this);
            }
        if (node.getColon() != null)
            {
                node.getColon().apply(this);
            }
        if (node.getHostIP() != null)
            {
                node.getHostIP().apply(this);
            }
        if (node.getAddress() != null)
            {
                node.getAddress().apply(this);
            }
        if (node.getHostName() != null)
            {
                node.getHostName().apply(this);
            }
        if (node.getHost() != null)
            {
                node.getHost().apply(this);
            }
        outAHostDeclaration(node);
    }

    public void inAHostPriorities(AHostPriorities node)
    {
        defaultIn(node);
    }

    public void outAHostPriorities(AHostPriorities node)
    {
        defaultOut(node);
    }

    public void caseAHostPriorities(AHostPriorities node)
    {
        inAHostPriorities(node);
        if (node.getPriorityList() != null)
            {
                node.getPriorityList().apply(this);
            }
        if (node.getPriorities() != null)
            {
                node.getPriorities().apply(this);
            }
        outAHostPriorities(node);
    }

    public void inAIP(AIP node)
    {
        defaultIn(node);
    }

    public void outAIP(AIP node)
    {
        defaultOut(node);
    }

    public void caseAIP(AIP node)
    {
        inAIP(node);
        if (node.getOctet4() != null)
            {
                node.getOctet4().apply(this);
            }
        if (node.getDot3() != null)
            {
                node.getDot3().apply(this);
            }
        if (node.getOctet3() != null)
            {
                node.getOctet3().apply(this);
            }
        if (node.getDot2() != null)
            {
                node.getDot2().apply(this);
            }
        if (node.getOctet2() != null)
            {
                node.getOctet2().apply(this);
            }
        if (node.getDot1() != null)
            {
                node.getDot1().apply(this);
            }
        if (node.getOctet1() != null)
            {
                node.getOctet1().apply(this);
            }
        outAIP(node);
    }

    public void inAConcretePriorityList(AConcretePriorityList node)
    {
        defaultIn(node);
    }

    public void outAConcretePriorityList(AConcretePriorityList node)
    {
        defaultOut(node);
    }

    public void caseAConcretePriorityList(AConcretePriorityList node)
    {
        inAConcretePriorityList(node);
        {
            Object temp[] = node.getPriorityTail().toArray();
            for (int i = temp.length - 1; i >= 0; i--)
                {
                    ((PPriorityTail) temp[i]).apply(this);
                }
        }
        if (node.getPriorityProd() != null)
            {
                node.getPriorityProd().apply(this);
            }
        outAConcretePriorityList(node);
    }

    public void inAPriorityList(APriorityList node)
    {
        defaultIn(node);
    }

    public void outAPriorityList(APriorityList node)
    {
        defaultOut(node);
    }

    public void caseAPriorityList(APriorityList node)
    {
        inAPriorityList(node);
        {
            Object temp[] = node.getPriorityProd().toArray();
            for (int i = temp.length - 1; i >= 0; i--)
                {
                    ((PPriorityProd) temp[i]).apply(this);
                }
        }
        outAPriorityList(node);
    }

    public void inAPriorityTail(APriorityTail node)
    {
        defaultIn(node);
    }

    public void outAPriorityTail(APriorityTail node)
    {
        defaultOut(node);
    }

    public void caseAPriorityTail(APriorityTail node)
    {
        inAPriorityTail(node);
        if (node.getPriorityProd() != null)
            {
                node.getPriorityProd().apply(this);
            }
        if (node.getGreaterThan() != null)
            {
                node.getGreaterThan().apply(this);
            }
        outAPriorityTail(node);
    }

    public void inAPriorityProd(APriorityProd node)
    {
        defaultIn(node);
    }

    public void outAPriorityProd(APriorityProd node)
    {
        defaultOut(node);
    }

    public void caseAPriorityProd(APriorityProd node)
    {
        inAPriorityProd(node);
        if (node.getPriorityName() != null)
            {
                node.getPriorityName().apply(this);
            }
        outAPriorityProd(node);
    }

    public void inANetworkDeclaration(ANetworkDeclaration node)
    {
        defaultIn(node);
    }

    public void outANetworkDeclaration(ANetworkDeclaration node)
    {
        defaultOut(node);
    }

    public void caseANetworkDeclaration(ANetworkDeclaration node)
    {
        inANetworkDeclaration(node);
        if (node.getNetworkConnection() != null)
            {
                node.getNetworkConnection().apply(this);
            }
        if (node.getNetworkIP() != null)
            {
                node.getNetworkIP().apply(this);
            }
        if (node.getAddress() != null)
            {
                node.getAddress().apply(this);
            }
        if (node.getNetworkName() != null)
            {
                node.getNetworkName().apply(this);
            }
        if (node.getNetwork() != null)
            {
                node.getNetwork().apply(this);
            }
        outANetworkDeclaration(node);
    }

    public void inANetworkConnection(ANetworkConnection node)
    {
        defaultIn(node);
    }

    public void outANetworkConnection(ANetworkConnection node)
    {
        defaultOut(node);
    }

    public void caseANetworkConnection(ANetworkConnection node)
    {
        inANetworkConnection(node);
        if (node.getHostList() != null)
            {
                node.getHostList().apply(this);
            }
        if (node.getComma() != null)
            {
                node.getComma().apply(this);
            }
        if (node.getHostName() != null)
            {
                node.getHostName().apply(this);
            }
        if (node.getConnects() != null)
            {
                node.getConnects().apply(this);
            }
        outANetworkConnection(node);
    }

    public void inAHostNameIdent(AHostNameIdent node)
    {
        defaultIn(node);
    }

    public void outAHostNameIdent(AHostNameIdent node)
    {
        defaultOut(node);
    }

    public void caseAHostNameIdent(AHostNameIdent node)
    {
        inAHostNameIdent(node);
        if (node.getIdent() != null)
            {
                node.getIdent().apply(this);
            }
        outAHostNameIdent(node);
    }

    public void inAConcreteHostList(AConcreteHostList node)
    {
        defaultIn(node);
    }

    public void outAConcreteHostList(AConcreteHostList node)
    {
        defaultOut(node);
    }

    public void caseAConcreteHostList(AConcreteHostList node)
    {
        inAConcreteHostList(node);
        {
            Object temp[] = node.getHostTail().toArray();
            for (int i = temp.length - 1; i >= 0; i--)
                {
                    ((PHostTail) temp[i]).apply(this);
                }
        }
        if (node.getHostNameIdent() != null)
            {
                node.getHostNameIdent().apply(this);
            }
        outAConcreteHostList(node);
    }

    public void inAHostList(AHostList node)
    {
        defaultIn(node);
    }

    public void outAHostList(AHostList node)
    {
        defaultOut(node);
    }

    public void caseAHostList(AHostList node)
    {
        inAHostList(node);
        {
            Object temp[] = node.getHostNameIdent().toArray();
            for (int i = temp.length - 1; i >= 0; i--)
                {
                    ((PHostNameIdent) temp[i]).apply(this);
                }
        }
        outAHostList(node);
    }

    public void inAHostTail(AHostTail node)
    {
        defaultIn(node);
    }

    public void outAHostTail(AHostTail node)
    {
        defaultOut(node);
    }

    public void caseAHostTail(AHostTail node)
    {
        inAHostTail(node);
        if (node.getHostNameIdent() != null)
            {
                node.getHostNameIdent().apply(this);
            }
        if (node.getComma() != null)
            {
                node.getComma().apply(this);
            }
        outAHostTail(node);
    }

    public void inAPortMappingAnnotation(APortMappingAnnotation node)
    {
        defaultIn(node);
    }

    public void outAPortMappingAnnotation(APortMappingAnnotation node)
    {
        defaultOut(node);
    }

    public void caseAPortMappingAnnotation(APortMappingAnnotation node)
    {
        inAPortMappingAnnotation(node);
        if (node.getRBracket() != null)
            {
                node.getRBracket().apply(this);
            }
        if (node.getHostName() != null)
            {
                node.getHostName().apply(this);
            }
        if (node.getHost() != null)
            {
                node.getHost().apply(this);
            }
        if (node.getLBracket() != null)
            {
                node.getLBracket().apply(this);
            }
        outAPortMappingAnnotation(node);
    }

    public void inANetworkTimeslotAnnotation(ANetworkTimeslotAnnotation node)
    {
        defaultIn(node);
    }

    public void outANetworkTimeslotAnnotation(ANetworkTimeslotAnnotation node)
    {
        defaultOut(node);
    }

    public void caseANetworkTimeslotAnnotation(ANetworkTimeslotAnnotation node)
    {
        inANetworkTimeslotAnnotation(node);
        if (node.getRBracket() != null)
            {
                node.getRBracket().apply(this);
            }
        if (node.getNetworkTimeslotDeclarationList() != null)
            {
                node.getNetworkTimeslotDeclarationList().apply(this);
            }
        if (node.getLBracket() != null)
            {
                node.getLBracket().apply(this);
            }
        outANetworkTimeslotAnnotation(node);
    }

    public void inAConcreteNetworkTimeslotDeclarationList(AConcreteNetworkTimeslotDeclarationList node)
    {
        defaultIn(node);
    }

    public void outAConcreteNetworkTimeslotDeclarationList(AConcreteNetworkTimeslotDeclarationList node)
    {
        defaultOut(node);
    }

    public void caseAConcreteNetworkTimeslotDeclarationList(AConcreteNetworkTimeslotDeclarationList node)
    {
        inAConcreteNetworkTimeslotDeclarationList(node);
        {
            Object temp[] = node.getNetworkTimeslotDeclarationTail().toArray();
            for (int i = temp.length - 1; i >= 0; i--)
                {
                    ((PNetworkTimeslotDeclarationTail) temp[i]).apply(this);
                }
        }
        if (node.getNetworkTimeslotDeclaration() != null)
            {
                node.getNetworkTimeslotDeclaration().apply(this);
            }
        outAConcreteNetworkTimeslotDeclarationList(node);
    }

    public void inANetworkTimeslotDeclarationList(ANetworkTimeslotDeclarationList node)
    {
        defaultIn(node);
    }

    public void outANetworkTimeslotDeclarationList(ANetworkTimeslotDeclarationList node)
    {
        defaultOut(node);
    }

    public void caseANetworkTimeslotDeclarationList(ANetworkTimeslotDeclarationList node)
    {
        inANetworkTimeslotDeclarationList(node);
        {
            Object temp[] = node.getNetworkTimeslotDeclaration().toArray();
            for (int i = temp.length - 1; i >= 0; i--)
                {
                    ((PNetworkTimeslotDeclaration) temp[i]).apply(this);
                }
        }
        outANetworkTimeslotDeclarationList(node);
    }

    public void inANetworkTimeslotDeclarationTail(ANetworkTimeslotDeclarationTail node)
    {
        defaultIn(node);
    }

    public void outANetworkTimeslotDeclarationTail(ANetworkTimeslotDeclarationTail node)
    {
        defaultOut(node);
    }

    public void caseANetworkTimeslotDeclarationTail(ANetworkTimeslotDeclarationTail node)
    {
        inANetworkTimeslotDeclarationTail(node);
        if (node.getNetworkTimeslotDeclaration() != null)
            {
                node.getNetworkTimeslotDeclaration().apply(this);
            }
        if (node.getSemicolon() != null)
            {
                node.getSemicolon().apply(this);
            }
        outANetworkTimeslotDeclarationTail(node);
    }

    public void inANetworkTimeslotDeclaration(ANetworkTimeslotDeclaration node)
    {
        defaultIn(node);
    }

    public void outANetworkTimeslotDeclaration(ANetworkTimeslotDeclaration node)
    {
        defaultOut(node);
    }

    public void caseANetworkTimeslotDeclaration(ANetworkTimeslotDeclaration node)
    {
        inANetworkTimeslotDeclaration(node);
        if (node.getTimeslotDeclarationList() != null)
            {
                node.getTimeslotDeclarationList().apply(this);
            }
        if (node.getSlots() != null)
            {
                node.getSlots().apply(this);
            }
        if (node.getNetworkName() != null)
            {
                node.getNetworkName().apply(this);
            }
        if (node.getNetwork() != null)
            {
                node.getNetwork().apply(this);
            }
        outANetworkTimeslotDeclaration(node);
    }

    public void inANetworkNameIdent(ANetworkNameIdent node)
    {
        defaultIn(node);
    }

    public void outANetworkNameIdent(ANetworkNameIdent node)
    {
        defaultOut(node);
    }

    public void caseANetworkNameIdent(ANetworkNameIdent node)
    {
        inANetworkNameIdent(node);
        if (node.getIdent() != null)
            {
                node.getIdent().apply(this);
            }
        outANetworkNameIdent(node);
    }

    public void inAConcreteTimeslotDeclarationList(AConcreteTimeslotDeclarationList node)
    {
        defaultIn(node);
    }

    public void outAConcreteTimeslotDeclarationList(AConcreteTimeslotDeclarationList node)
    {
        defaultOut(node);
    }

    public void caseAConcreteTimeslotDeclarationList(AConcreteTimeslotDeclarationList node)
    {
        inAConcreteTimeslotDeclarationList(node);
        {
            Object temp[] = node.getTimeslotDeclarationTail().toArray();
            for (int i = temp.length - 1; i >= 0; i--)
                {
                    ((PTimeslotDeclarationTail) temp[i]).apply(this);
                }
        }
        if (node.getTimeslotDeclaration() != null)
            {
                node.getTimeslotDeclaration().apply(this);
            }
        outAConcreteTimeslotDeclarationList(node);
    }

    public void inATimeslotDeclarationList(ATimeslotDeclarationList node)
    {
        defaultIn(node);
    }

    public void outATimeslotDeclarationList(ATimeslotDeclarationList node)
    {
        defaultOut(node);
    }

    public void caseATimeslotDeclarationList(ATimeslotDeclarationList node)
    {
        inATimeslotDeclarationList(node);
        {
            Object temp[] = node.getTimeslotDeclaration().toArray();
            for (int i = temp.length - 1; i >= 0; i--)
                {
                    ((PTimeslotDeclaration) temp[i]).apply(this);
                }
        }
        outATimeslotDeclarationList(node);
    }

    public void inATimeslotDeclarationTail(ATimeslotDeclarationTail node)
    {
        defaultIn(node);
    }

    public void outATimeslotDeclarationTail(ATimeslotDeclarationTail node)
    {
        defaultOut(node);
    }

    public void caseATimeslotDeclarationTail(ATimeslotDeclarationTail node)
    {
        inATimeslotDeclarationTail(node);
        if (node.getTimeslotDeclaration() != null)
            {
                node.getTimeslotDeclaration().apply(this);
            }
        if (node.getComma() != null)
            {
                node.getComma().apply(this);
            }
        outATimeslotDeclarationTail(node);
    }

    public void inATimeslotDeclaration(ATimeslotDeclaration node)
    {
        defaultIn(node);
    }

    public void outATimeslotDeclaration(ATimeslotDeclaration node)
    {
        defaultOut(node);
    }

    public void caseATimeslotDeclaration(ATimeslotDeclaration node)
    {
        inATimeslotDeclaration(node);
        if (node.getRPar() != null)
            {
                node.getRPar().apply(this);
            }
        if (node.getEndTime() != null)
            {
                node.getEndTime().apply(this);
            }
        if (node.getComma() != null)
            {
                node.getComma().apply(this);
            }
        if (node.getStartTime() != null)
            {
                node.getStartTime().apply(this);
            }
        if (node.getLPar() != null)
            {
                node.getLPar().apply(this);
            }
        if (node.getTimeslotName() != null)
            {
                node.getTimeslotName().apply(this);
            }
        outATimeslotDeclaration(node);
    }

    public void inAModeConnectionAnnotation(AModeConnectionAnnotation node)
    {
        defaultIn(node);
    }

    public void outAModeConnectionAnnotation(AModeConnectionAnnotation node)
    {
        defaultOut(node);
    }

    public void caseAModeConnectionAnnotation(AModeConnectionAnnotation node)
    {
        inAModeConnectionAnnotation(node);
        if (node.getRBracket() != null)
            {
                node.getRBracket().apply(this);
            }
        if (node.getScheduleConnectionList() != null)
            {
                node.getScheduleConnectionList().apply(this);
            }
        if (node.getSemicolon() != null)
            {
                node.getSemicolon().apply(this);
            }
        if (node.getHostName() != null)
            {
                node.getHostName().apply(this);
            }
        if (node.getHost() != null)
            {
                node.getHost().apply(this);
            }
        if (node.getLBracket() != null)
            {
                node.getLBracket().apply(this);
            }
        outAModeConnectionAnnotation(node);
    }

    public void inAConcreteScheduleConnectionList(AConcreteScheduleConnectionList node)
    {
        defaultIn(node);
    }

    public void outAConcreteScheduleConnectionList(AConcreteScheduleConnectionList node)
    {
        defaultOut(node);
    }

    public void caseAConcreteScheduleConnectionList(AConcreteScheduleConnectionList node)
    {
        inAConcreteScheduleConnectionList(node);
        {
            Object temp[] = node.getScheduleConnectionTail().toArray();
            for (int i = temp.length - 1; i >= 0; i--)
                {
                    ((PScheduleConnectionTail) temp[i]).apply(this);
                }
        }
        if (node.getScheduleConnection() != null)
            {
                node.getScheduleConnection().apply(this);
            }
        outAConcreteScheduleConnectionList(node);
    }

    public void inAScheduleConnectionList(AScheduleConnectionList node)
    {
        defaultIn(node);
    }

    public void outAScheduleConnectionList(AScheduleConnectionList node)
    {
        defaultOut(node);
    }

    public void caseAScheduleConnectionList(AScheduleConnectionList node)
    {
        inAScheduleConnectionList(node);
        {
            Object temp[] = node.getScheduleConnection().toArray();
            for (int i = temp.length - 1; i >= 0; i--)
                {
                    ((PScheduleConnection) temp[i]).apply(this);
                }
        }
        outAScheduleConnectionList(node);
    }

    public void inAScheduleConnectionTail(AScheduleConnectionTail node)
    {
        defaultIn(node);
    }

    public void outAScheduleConnectionTail(AScheduleConnectionTail node)
    {
        defaultOut(node);
    }

    public void caseAScheduleConnectionTail(AScheduleConnectionTail node)
    {
        inAScheduleConnectionTail(node);
        if (node.getScheduleConnection() != null)
            {
                node.getScheduleConnection().apply(this);
            }
        if (node.getSemicolon() != null)
            {
                node.getSemicolon().apply(this);
            }
        outAScheduleConnectionTail(node);
    }

    public void inAScheduleConnection(AScheduleConnection node)
    {
        defaultIn(node);
    }

    public void outAScheduleConnection(AScheduleConnection node)
    {
        defaultOut(node);
    }

    public void caseAScheduleConnection(AScheduleConnection node)
    {
        inAScheduleConnection(node);
        if (node.getNetworkTimeslots() != null)
            {
                node.getNetworkTimeslots().apply(this);
            }
        if (node.getDestinations() != null)
            {
                node.getDestinations().apply(this);
            }
        if (node.getPushPorts() != null)
            {
                node.getPushPorts().apply(this);
            }
        if (node.getPush() != null)
            {
                node.getPush().apply(this);
            }
        outAScheduleConnection(node);
    }

    public void inADestinations(ADestinations node)
    {
        defaultIn(node);
    }

    public void outADestinations(ADestinations node)
    {
        defaultOut(node);
    }

    public void caseADestinations(ADestinations node)
    {
        inADestinations(node);
        if (node.getRPar() != null)
            {
                node.getRPar().apply(this);
            }
        if (node.getDestinationNames() != null)
            {
                node.getDestinationNames().apply(this);
            }
        if (node.getLPar() != null)
            {
                node.getLPar().apply(this);
            }
        if (node.getTo() != null)
            {
                node.getTo().apply(this);
            }
        outADestinations(node);
    }

    public void inANetworkTimeslots(ANetworkTimeslots node)
    {
        defaultIn(node);
    }

    public void outANetworkTimeslots(ANetworkTimeslots node)
    {
        defaultOut(node);
    }

    public void caseANetworkTimeslots(ANetworkTimeslots node)
    {
        inANetworkTimeslots(node);
        if (node.getTimeslotList() != null)
            {
                node.getTimeslotList().apply(this);
            }
        if (node.getSlots() != null)
            {
                node.getSlots().apply(this);
            }
        if (node.getNetworkName() != null)
            {
                node.getNetworkName().apply(this);
            }
        if (node.getIn() != null)
            {
                node.getIn().apply(this);
            }
        outANetworkTimeslots(node);
    }

    public void inAConcreteTimeslotList(AConcreteTimeslotList node)
    {
        defaultIn(node);
    }

    public void outAConcreteTimeslotList(AConcreteTimeslotList node)
    {
        defaultOut(node);
    }

    public void caseAConcreteTimeslotList(AConcreteTimeslotList node)
    {
        inAConcreteTimeslotList(node);
        {
            Object temp[] = node.getTimeslotTail().toArray();
            for (int i = temp.length - 1; i >= 0; i--)
                {
                    ((PTimeslotTail) temp[i]).apply(this);
                }
        }
        if (node.getTimeslot() != null)
            {
                node.getTimeslot().apply(this);
            }
        outAConcreteTimeslotList(node);
    }

    public void inATimeslotList(ATimeslotList node)
    {
        defaultIn(node);
    }

    public void outATimeslotList(ATimeslotList node)
    {
        defaultOut(node);
    }

    public void caseATimeslotList(ATimeslotList node)
    {
        inATimeslotList(node);
        {
            Object temp[] = node.getTimeslot().toArray();
            for (int i = temp.length - 1; i >= 0; i--)
                {
                    ((PTimeslot) temp[i]).apply(this);
                }
        }
        outATimeslotList(node);
    }

    public void inATimeslotTail(ATimeslotTail node)
    {
        defaultIn(node);
    }

    public void outATimeslotTail(ATimeslotTail node)
    {
        defaultOut(node);
    }

    public void caseATimeslotTail(ATimeslotTail node)
    {
        inATimeslotTail(node);
        if (node.getTimeslot() != null)
            {
                node.getTimeslot().apply(this);
            }
        if (node.getComma() != null)
            {
                node.getComma().apply(this);
            }
        outATimeslotTail(node);
    }

    public void inATimeslot(ATimeslot node)
    {
        defaultIn(node);
    }

    public void outATimeslot(ATimeslot node)
    {
        defaultOut(node);
    }

    public void caseATimeslot(ATimeslot node)
    {
        inATimeslot(node);
        if (node.getTimeslotName() != null)
            {
                node.getTimeslotName().apply(this);
            }
        outATimeslot(node);
    }

    public void inAActualGlobalParameters(AActualGlobalParameters node)
    {
        defaultIn(node);
    }

    public void outAActualGlobalParameters(AActualGlobalParameters node)
    {
        defaultOut(node);
    }

    public void caseAActualGlobalParameters(AActualGlobalParameters node)
    {
        inAActualGlobalParameters(node);
        if (node.getRPar() != null)
            {
                node.getRPar().apply(this);
            }
        if (node.getActualGlobalParameterList() != null)
            {
                node.getActualGlobalParameterList().apply(this);
            }
        if (node.getLPar() != null)
            {
                node.getLPar().apply(this);
            }
        outAActualGlobalParameters(node);
    }

    public void inAConcreteActualGlobalParameterList(AConcreteActualGlobalParameterList node)
    {
        defaultIn(node);
    }

    public void outAConcreteActualGlobalParameterList(AConcreteActualGlobalParameterList node)
    {
        defaultOut(node);
    }

    public void caseAConcreteActualGlobalParameterList(AConcreteActualGlobalParameterList node)
    {
        inAConcreteActualGlobalParameterList(node);
        {
            Object temp[] = node.getActualGlobalParameterTail().toArray();
            for (int i = temp.length - 1; i >= 0; i--)
                {
                    ((PActualGlobalParameterTail) temp[i]).apply(this);
                }
        }
        if (node.getActualGlobalParameter() != null)
            {
                node.getActualGlobalParameter().apply(this);
            }
        outAConcreteActualGlobalParameterList(node);
    }

    public void inAActualGlobalParameterList(AActualGlobalParameterList node)
    {
        defaultIn(node);
    }

    public void outAActualGlobalParameterList(AActualGlobalParameterList node)
    {
        defaultOut(node);
    }

    public void caseAActualGlobalParameterList(AActualGlobalParameterList node)
    {
        inAActualGlobalParameterList(node);
        {
            Object temp[] = node.getActualGlobalParameter().toArray();
            for (int i = temp.length - 1; i >= 0; i--)
                {
                    ((PActualGlobalParameter) temp[i]).apply(this);
                }
        }
        outAActualGlobalParameterList(node);
    }

    public void inAActualGlobalParameterTail(AActualGlobalParameterTail node)
    {
        defaultIn(node);
    }

    public void outAActualGlobalParameterTail(AActualGlobalParameterTail node)
    {
        defaultOut(node);
    }

    public void caseAActualGlobalParameterTail(AActualGlobalParameterTail node)
    {
        inAActualGlobalParameterTail(node);
        if (node.getActualGlobalParameter() != null)
            {
                node.getActualGlobalParameter().apply(this);
            }
        if (node.getComma() != null)
            {
                node.getComma().apply(this);
            }
        outAActualGlobalParameterTail(node);
    }

    public void inAActualGlobalParameter(AActualGlobalParameter node)
    {
        defaultIn(node);
    }

    public void outAActualGlobalParameter(AActualGlobalParameter node)
    {
        defaultOut(node);
    }

    public void caseAActualGlobalParameter(AActualGlobalParameter node)
    {
        inAActualGlobalParameter(node);
        if (node.getParameterName() != null)
            {
                node.getParameterName().apply(this);
            }
        outAActualGlobalParameter(node);
    }

    public void inAModeSwitchAnnotation(AModeSwitchAnnotation node)
    {
        defaultIn(node);
    }

    public void outAModeSwitchAnnotation(AModeSwitchAnnotation node)
    {
        defaultOut(node);
    }

    public void caseAModeSwitchAnnotation(AModeSwitchAnnotation node)
    {
        inAModeSwitchAnnotation(node);
        if (node.getRBracket() != null)
            {
                node.getRBracket().apply(this);
            }
        if (node.getScheduleConnectionList() != null)
            {
                node.getScheduleConnectionList().apply(this);
            }
        if (node.getSemicolon() != null)
            {
                node.getSemicolon().apply(this);
            }
        if (node.getHostName() != null)
            {
                node.getHostName().apply(this);
            }
        if (node.getHost() != null)
            {
                node.getHost().apply(this);
            }
        if (node.getLBracket() != null)
            {
                node.getLBracket().apply(this);
            }
        outAModeSwitchAnnotation(node);
    }

    public void inATaskAnnotation(ATaskAnnotation node)
    {
        defaultIn(node);
    }

    public void outATaskAnnotation(ATaskAnnotation node)
    {
        defaultOut(node);
    }

    public void caseATaskAnnotation(ATaskAnnotation node)
    {
        inATaskAnnotation(node);
        if (node.getRBracket() != null)
            {
                node.getRBracket().apply(this);
            }
        if (node.getScheduleConnectionList() != null)
            {
                node.getScheduleConnectionList().apply(this);
            }
        if (node.getSemicolon() != null)
            {
                node.getSemicolon().apply(this);
            }
        if (node.getTaskPriority() != null)
            {
                node.getTaskPriority().apply(this);
            }
        if (node.getHostName() != null)
            {
                node.getHostName().apply(this);
            }
        if (node.getHost() != null)
            {
                node.getHost().apply(this);
            }
        if (node.getLBracket() != null)
            {
                node.getLBracket().apply(this);
            }
        outATaskAnnotation(node);
    }

    public void inATaskPriority(ATaskPriority node)
    {
        defaultIn(node);
    }

    public void outATaskPriority(ATaskPriority node)
    {
        defaultOut(node);
    }

    public void caseATaskPriority(ATaskPriority node)
    {
        inATaskPriority(node);
        if (node.getPriorityName() != null)
            {
                node.getPriorityName().apply(this);
            }
        if (node.getPriority() != null)
            {
                node.getPriority().apply(this);
            }
        outATaskPriority(node);
    }

    public void inATaskWcetAnnotation(ATaskWcetAnnotation node)
    {
        defaultIn(node);
    }

    public void outATaskWcetAnnotation(ATaskWcetAnnotation node)
    {
        defaultOut(node);
    }

    public void caseATaskWcetAnnotation(ATaskWcetAnnotation node)
    {
        inATaskWcetAnnotation(node);
        if (node.getRBracket() != null)
            {
                node.getRBracket().apply(this);
            }
        if (node.getTime() != null)
            {
                node.getTime().apply(this);
            }
        if (node.getWcet() != null)
            {
                node.getWcet().apply(this);
            }
        if (node.getLBracket() != null)
            {
                node.getLBracket().apply(this);
            }
        outATaskWcetAnnotation(node);
    }

    public void inATaskTimingAnnotation(ATaskTimingAnnotation node)
    {
        defaultIn(node);
    }

    public void outATaskTimingAnnotation(ATaskTimingAnnotation node)
    {
        defaultOut(node);
    }

    public void caseATaskTimingAnnotation(ATaskTimingAnnotation node)
    {
        inATaskTimingAnnotation(node);
        if (node.getRBracket() != null)
            {
                node.getRBracket().apply(this);
            }
        if (node.getEnd() != null)
            {
                node.getEnd().apply(this);
            }
        if (node.getLessOrEqual() != null)
            {
                node.getLessOrEqual().apply(this);
            }
        if (node.getStart() != null)
            {
                node.getStart().apply(this);
            }
        if (node.getLBracket() != null)
            {
                node.getLBracket().apply(this);
            }
        outATaskTimingAnnotation(node);
    }
}
