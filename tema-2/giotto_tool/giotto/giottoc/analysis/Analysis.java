/* This file was generated by SableCC (http://www.sablecc.org/). */

package giotto.giottoc.analysis;

import giotto.giottoc.node.*;

public interface Analysis extends Switch
{
    Object getIn(Node node);
    void setIn(Node node, Object in);
    Object getOut(Node node);
    void setOut(Node node, Object out);

    void caseStart(Start node);
    void caseAProgram(AProgram node);
    void caseAModuleDeclarationSequence(AModuleDeclarationSequence node);
    void caseAConcreteModuleDeclarationList(AConcreteModuleDeclarationList node);
    void caseAModuleDeclarationList(AModuleDeclarationList node);
    void caseAModuleDeclarationTail(AModuleDeclarationTail node);
    void caseAModuleDeclaration(AModuleDeclaration node);
    void caseAConcreteQualident(AConcreteQualident node);
    void caseAQualident(AQualident node);
    void caseAQualidentTail(AQualidentTail node);
    void caseATypeDeclarationSequence(ATypeDeclarationSequence node);
    void caseATypeDeclaration(ATypeDeclaration node);
    void caseASensorDeclarationSequence(ASensorDeclarationSequence node);
    void caseASensorDeclaration(ASensorDeclaration node);
    void caseADeviceDriver(ADeviceDriver node);
    void caseAActuatorDeclarationSequence(AActuatorDeclarationSequence node);
    void caseAActuatorDeclaration(AActuatorDeclaration node);
    void caseAOutputDeclarationSequence(AOutputDeclarationSequence node);
    void caseAOutputDeclaration(AOutputDeclaration node);
    void caseATaskDeclaration(ATaskDeclaration node);
    void caseAFormalPorts(AFormalPorts node);
    void caseAConcreteFormalPortList(AConcreteFormalPortList node);
    void caseAFormalPortList(AFormalPortList node);
    void caseAFormalPortTail(AFormalPortTail node);
    void caseAFormalPort(AFormalPort node);
    void caseAActualPorts(AActualPorts node);
    void caseAConcreteActualPortList(AConcreteActualPortList node);
    void caseAActualPortList(AActualPortList node);
    void caseAActualPortTail(AActualPortTail node);
    void caseAActualPort(AActualPort node);
    void caseAStatePorts(AStatePorts node);
    void caseAConcreteStatePortList(AConcreteStatePortList node);
    void caseAStatePortList(AStatePortList node);
    void caseAStatePortTail(AStatePortTail node);
    void caseAStatePort(AStatePort node);
    void caseAScheduleTask(AScheduleTask node);
    void caseAActualScopedParameters(AActualScopedParameters node);
    void caseAConcreteActualScopedParameterList(AConcreteActualScopedParameterList node);
    void caseAActualScopedParameterList(AActualScopedParameterList node);
    void caseAActualScopedParameterTail(AActualScopedParameterTail node);
    void caseAActualScopedParameter(AActualScopedParameter node);
    void caseADriverDeclaration(ADriverDeclaration node);
    void caseACallDriver(ACallDriver node);
    void caseAGuardParameters(AGuardParameters node);
    void caseAModeDeclarationSequence(AModeDeclarationSequence node);
    void caseAModeDeclaration(AModeDeclaration node);
    void caseAActuatorUpdate(AActuatorUpdate node);
    void caseAModeSwitch(AModeSwitch node);
    void caseATaskInvocation(ATaskInvocation node);
    void caseAHardwareAnnotation(AHardwareAnnotation node);
    void caseAConcreteHardwareDeclarationList(AConcreteHardwareDeclarationList node);
    void caseAHardwareDeclarationList(AHardwareDeclarationList node);
    void caseAHardwareDeclarationTail(AHardwareDeclarationTail node);
    void caseAHostHardwareDeclaration(AHostHardwareDeclaration node);
    void caseANetworkHardwareDeclaration(ANetworkHardwareDeclaration node);
    void caseAHostDeclaration(AHostDeclaration node);
    void caseAHostPriorities(AHostPriorities node);
    void caseAIP(AIP node);
    void caseAConcretePriorityList(AConcretePriorityList node);
    void caseAPriorityList(APriorityList node);
    void caseAPriorityTail(APriorityTail node);
    void caseAPriorityProd(APriorityProd node);
    void caseANetworkDeclaration(ANetworkDeclaration node);
    void caseANetworkConnection(ANetworkConnection node);
    void caseAHostNameIdent(AHostNameIdent node);
    void caseAConcreteHostList(AConcreteHostList node);
    void caseAHostList(AHostList node);
    void caseAHostTail(AHostTail node);
    void caseAPortMappingAnnotation(APortMappingAnnotation node);
    void caseANetworkTimeslotAnnotation(ANetworkTimeslotAnnotation node);
    void caseAConcreteNetworkTimeslotDeclarationList(AConcreteNetworkTimeslotDeclarationList node);
    void caseANetworkTimeslotDeclarationList(ANetworkTimeslotDeclarationList node);
    void caseANetworkTimeslotDeclarationTail(ANetworkTimeslotDeclarationTail node);
    void caseANetworkTimeslotDeclaration(ANetworkTimeslotDeclaration node);
    void caseANetworkNameIdent(ANetworkNameIdent node);
    void caseAConcreteTimeslotDeclarationList(AConcreteTimeslotDeclarationList node);
    void caseATimeslotDeclarationList(ATimeslotDeclarationList node);
    void caseATimeslotDeclarationTail(ATimeslotDeclarationTail node);
    void caseATimeslotDeclaration(ATimeslotDeclaration node);
    void caseAModeConnectionAnnotation(AModeConnectionAnnotation node);
    void caseAConcreteScheduleConnectionList(AConcreteScheduleConnectionList node);
    void caseAScheduleConnectionList(AScheduleConnectionList node);
    void caseAScheduleConnectionTail(AScheduleConnectionTail node);
    void caseAScheduleConnection(AScheduleConnection node);
    void caseADestinations(ADestinations node);
    void caseANetworkTimeslots(ANetworkTimeslots node);
    void caseAConcreteTimeslotList(AConcreteTimeslotList node);
    void caseATimeslotList(ATimeslotList node);
    void caseATimeslotTail(ATimeslotTail node);
    void caseATimeslot(ATimeslot node);
    void caseAActualGlobalParameters(AActualGlobalParameters node);
    void caseAConcreteActualGlobalParameterList(AConcreteActualGlobalParameterList node);
    void caseAActualGlobalParameterList(AActualGlobalParameterList node);
    void caseAActualGlobalParameterTail(AActualGlobalParameterTail node);
    void caseAActualGlobalParameter(AActualGlobalParameter node);
    void caseAModeSwitchAnnotation(AModeSwitchAnnotation node);
    void caseATaskAnnotation(ATaskAnnotation node);
    void caseATaskPriority(ATaskPriority node);
    void caseATaskWcetAnnotation(ATaskWcetAnnotation node);
    void caseATaskTimingAnnotation(ATaskTimingAnnotation node);

    void caseTModule(TModule node);
    void caseTType(TType node);
    void caseTIs(TIs node);
    void caseTSensor(TSensor node);
    void caseTUses(TUses node);
    void caseTActuator(TActuator node);
    void caseTOutput(TOutput node);
    void caseTTask(TTask node);
    void caseTSchedule(TSchedule node);
    void caseTState(TState node);
    void caseTDriver(TDriver node);
    void caseTIf(TIf node);
    void caseTThen(TThen node);
    void caseTStart(TStart node);
    void caseTMode(TMode node);
    void caseTPeriod(TPeriod node);
    void caseTActfreq(TActfreq node);
    void caseTDo(TDo node);
    void caseTExitfreq(TExitfreq node);
    void caseTTaskfreq(TTaskfreq node);
    void caseTHost(THost node);
    void caseTAddress(TAddress node);
    void caseTPriorities(TPriorities node);
    void caseTNetwork(TNetwork node);
    void caseTConnects(TConnects node);
    void caseTSlots(TSlots node);
    void caseTPush(TPush node);
    void caseTFrom(TFrom node);
    void caseTTo(TTo node);
    void caseTIn(TIn node);
    void caseTPriority(TPriority node);
    void caseTWcet(TWcet node);
    void caseTIdent(TIdent node);
    void caseTNumber(TNumber node);
    void caseTSemicolon(TSemicolon node);
    void caseTComma(TComma node);
    void caseTDot(TDot node);
    void caseTColon(TColon node);
    void caseTGreaterThan(TGreaterThan node);
    void caseTLessOrEqual(TLessOrEqual node);
    void caseTAssign(TAssign node);
    void caseTLPar(TLPar node);
    void caseTRPar(TRPar node);
    void caseTLBrace(TLBrace node);
    void caseTRBrace(TRBrace node);
    void caseTLBracket(TLBracket node);
    void caseTRBracket(TRBracket node);
    void caseTBlank(TBlank node);
    void caseTComment(TComment node);
    void caseEOF(EOF node);
}
