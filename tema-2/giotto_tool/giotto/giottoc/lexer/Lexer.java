/* This file was generated by SableCC (http://www.sablecc.org/). */

package giotto.giottoc.lexer;

import giotto.giottoc.node.EOF;
import giotto.giottoc.node.TActfreq;
import giotto.giottoc.node.TActuator;
import giotto.giottoc.node.TAddress;
import giotto.giottoc.node.TAssign;
import giotto.giottoc.node.TBlank;
import giotto.giottoc.node.TColon;
import giotto.giottoc.node.TComma;
import giotto.giottoc.node.TComment;
import giotto.giottoc.node.TConnects;
import giotto.giottoc.node.TDo;
import giotto.giottoc.node.TDot;
import giotto.giottoc.node.TDriver;
import giotto.giottoc.node.TExitfreq;
import giotto.giottoc.node.TFrom;
import giotto.giottoc.node.TGreaterThan;
import giotto.giottoc.node.THost;
import giotto.giottoc.node.TIdent;
import giotto.giottoc.node.TIf;
import giotto.giottoc.node.TIn;
import giotto.giottoc.node.TIs;
import giotto.giottoc.node.TLBrace;
import giotto.giottoc.node.TLBracket;
import giotto.giottoc.node.TLPar;
import giotto.giottoc.node.TLessOrEqual;
import giotto.giottoc.node.TMode;
import giotto.giottoc.node.TModule;
import giotto.giottoc.node.TNetwork;
import giotto.giottoc.node.TNumber;
import giotto.giottoc.node.TOutput;
import giotto.giottoc.node.TPeriod;
import giotto.giottoc.node.TPriorities;
import giotto.giottoc.node.TPriority;
import giotto.giottoc.node.TPush;
import giotto.giottoc.node.TRBrace;
import giotto.giottoc.node.TRBracket;
import giotto.giottoc.node.TRPar;
import giotto.giottoc.node.TSchedule;
import giotto.giottoc.node.TSemicolon;
import giotto.giottoc.node.TSensor;
import giotto.giottoc.node.TSlots;
import giotto.giottoc.node.TStart;
import giotto.giottoc.node.TState;
import giotto.giottoc.node.TTask;
import giotto.giottoc.node.TTaskfreq;
import giotto.giottoc.node.TThen;
import giotto.giottoc.node.TTo;
import giotto.giottoc.node.TType;
import giotto.giottoc.node.TUses;
import giotto.giottoc.node.TWcet;
import giotto.giottoc.node.Token;

import java.io.BufferedInputStream;
import java.io.DataInputStream;
import java.io.IOException;
import java.io.PushbackReader;

/**
 * @author M.A.A. Sanvido
 * @version Lexer.java,v 1.7 2004/10/01 01:10:22 cxh Exp
 * @since Giotto 1.0.1
 */
public class Lexer
{
    protected Token token;
    protected State state = State.INITIAL;

    private PushbackReader in;
    private int line;
    private int pos;
    private boolean cr;
    private boolean eof;
    private final StringBuffer text = new StringBuffer();

    protected void filter() throws LexerException, IOException
    {
    }

    public Lexer(PushbackReader in)
    {
        this.in = in;

        if (gotoTable == null)
            {
                try
                    {
                        DataInputStream s = new DataInputStream(
                                new BufferedInputStream(
                                        Lexer.class.getResourceAsStream("lexer.dat")));

                        // read gotoTable
                        int length = s.readInt();
                        gotoTable = new int[length][][][];
                        for (int i = 0; i < gotoTable.length; i++)
                            {
                                length = s.readInt();
                                gotoTable[i] = new int[length][][];
                                for (int j = 0; j < gotoTable[i].length; j++)
                                    {
                                        length = s.readInt();
                                        gotoTable[i][j] = new int[length][3];
                                        for (int k = 0; k < gotoTable[i][j].length; k++)
                                            {
                                                for (int l = 0; l < 3; l++)
                                                    {
                                                        gotoTable[i][j][k][l] = s.readInt();
                                                    }
                                            }
                                    }
                            }

                        // read accept
                        length = s.readInt();
                        accept = new int[length][];
                        for (int i = 0; i < accept.length; i++)
                            {
                                length = s.readInt();
                                accept[i] = new int[length];
                                for (int j = 0; j < accept[i].length; j++)
                                    {
                                        accept[i][j] = s.readInt();
                                    }
                            }

                        s.close();
                    }
                catch (Exception e)
                    {
                        throw new RuntimeException("The file \"lexer.dat\" is either missing or corrupted.");
                    }
            }
    }

    public Token peek() throws LexerException, IOException
    {
        while (token == null)
            {
                token = getToken();
                filter();
            }

        return token;
    }

    public Token next() throws LexerException, IOException
    {
        while (token == null)
            {
                token = getToken();
                filter();
            }

        Token result = token;
        token = null;
        return result;
    }

    protected Token getToken() throws IOException, LexerException
    {
        int dfa_state = 0;

        int start_pos = pos;
        int start_line = line;

        int accept_state = -1;
        int accept_token = -1;
        int accept_length = -1;
        int accept_pos = -1;
        int accept_line = -1;

        int[][][] gotoTable = this.gotoTable[state.id()];
        int[] accept = this.accept[state.id()];
        text.setLength(0);

        while (true)
            {
                int c = getChar();

                if (c != -1)
                    {
                        switch(c)
                            {
                            case 10:
                                if (cr)
                                    {
                                        cr = false;
                                    }
                                else
                                    {
                                        line++;
                                        pos = 0;
                                    }
                                break;
                            case 13:
                                line++;
                                pos = 0;
                                cr = true;
                                break;
                            default:
                                pos++;
                                cr = false;
                                break;
                            };

                        text.append((char) c);

                        do
                            {
                                int oldState = (dfa_state < -1) ? (-2 -dfa_state) : dfa_state;

                                dfa_state = -1;

                                int[][] tmp1 =  gotoTable[oldState];
                                int low = 0;
                                int high = tmp1.length - 1;

                                while (low <= high)
                                    {
                                        int middle = (low + high) / 2;
                                        int[] tmp2 = tmp1[middle];

                                        if (c < tmp2[0])
                                            {
                                                high = middle - 1;
                                            }
                                        else if (c > tmp2[1])
                                            {
                                                low = middle + 1;
                                            }
                                        else
                                            {
                                                dfa_state = tmp2[2];
                                                break;
                                            }
                                    }
                            } while (dfa_state < -1);
                    }
                else
                    {
                        dfa_state = -1;
                    }

                if (dfa_state >= 0)
                    {
                        if (accept[dfa_state] != -1)
                            {
                                accept_state = dfa_state;
                                accept_token = accept[dfa_state];
                                accept_length = text.length();
                                accept_pos = pos;
                                accept_line = line;
                            }
                    }
                else
                    {
                        if (accept_state != -1)
                            {
                                switch(accept_token)
                                    {
                                    case 0:
                                        {
                                            Token token = new0(
                                                    start_line + 1,
                                                    start_pos + 1);
                                            pushBack(accept_length);
                                            pos = accept_pos;
                                            line = accept_line;
                                            return token;
                                        }
                                    case 1:
                                        {
                                            Token token = new1(
                                                    start_line + 1,
                                                    start_pos + 1);
                                            pushBack(accept_length);
                                            pos = accept_pos;
                                            line = accept_line;
                                            return token;
                                        }
                                    case 2:
                                        {
                                            Token token = new2(
                                                    start_line + 1,
                                                    start_pos + 1);
                                            pushBack(accept_length);
                                            pos = accept_pos;
                                            line = accept_line;
                                            return token;
                                        }
                                    case 3:
                                        {
                                            Token token = new3(
                                                    start_line + 1,
                                                    start_pos + 1);
                                            pushBack(accept_length);
                                            pos = accept_pos;
                                            line = accept_line;
                                            return token;
                                        }
                                    case 4:
                                        {
                                            Token token = new4(
                                                    start_line + 1,
                                                    start_pos + 1);
                                            pushBack(accept_length);
                                            pos = accept_pos;
                                            line = accept_line;
                                            return token;
                                        }
                                    case 5:
                                        {
                                            Token token = new5(
                                                    start_line + 1,
                                                    start_pos + 1);
                                            pushBack(accept_length);
                                            pos = accept_pos;
                                            line = accept_line;
                                            return token;
                                        }
                                    case 6:
                                        {
                                            Token token = new6(
                                                    start_line + 1,
                                                    start_pos + 1);
                                            pushBack(accept_length);
                                            pos = accept_pos;
                                            line = accept_line;
                                            return token;
                                        }
                                    case 7:
                                        {
                                            Token token = new7(
                                                    start_line + 1,
                                                    start_pos + 1);
                                            pushBack(accept_length);
                                            pos = accept_pos;
                                            line = accept_line;
                                            return token;
                                        }
                                    case 8:
                                        {
                                            Token token = new8(
                                                    start_line + 1,
                                                    start_pos + 1);
                                            pushBack(accept_length);
                                            pos = accept_pos;
                                            line = accept_line;
                                            return token;
                                        }
                                    case 9:
                                        {
                                            Token token = new9(
                                                    start_line + 1,
                                                    start_pos + 1);
                                            pushBack(accept_length);
                                            pos = accept_pos;
                                            line = accept_line;
                                            return token;
                                        }
                                    case 10:
                                        {
                                            Token token = new10(
                                                    start_line + 1,
                                                    start_pos + 1);
                                            pushBack(accept_length);
                                            pos = accept_pos;
                                            line = accept_line;
                                            return token;
                                        }
                                    case 11:
                                        {
                                            Token token = new11(
                                                    start_line + 1,
                                                    start_pos + 1);
                                            pushBack(accept_length);
                                            pos = accept_pos;
                                            line = accept_line;
                                            return token;
                                        }
                                    case 12:
                                        {
                                            Token token = new12(
                                                    start_line + 1,
                                                    start_pos + 1);
                                            pushBack(accept_length);
                                            pos = accept_pos;
                                            line = accept_line;
                                            return token;
                                        }
                                    case 13:
                                        {
                                            Token token = new13(
                                                    start_line + 1,
                                                    start_pos + 1);
                                            pushBack(accept_length);
                                            pos = accept_pos;
                                            line = accept_line;
                                            return token;
                                        }
                                    case 14:
                                        {
                                            Token token = new14(
                                                    start_line + 1,
                                                    start_pos + 1);
                                            pushBack(accept_length);
                                            pos = accept_pos;
                                            line = accept_line;
                                            return token;
                                        }
                                    case 15:
                                        {
                                            Token token = new15(
                                                    start_line + 1,
                                                    start_pos + 1);
                                            pushBack(accept_length);
                                            pos = accept_pos;
                                            line = accept_line;
                                            return token;
                                        }
                                    case 16:
                                        {
                                            Token token = new16(
                                                    start_line + 1,
                                                    start_pos + 1);
                                            pushBack(accept_length);
                                            pos = accept_pos;
                                            line = accept_line;
                                            return token;
                                        }
                                    case 17:
                                        {
                                            Token token = new17(
                                                    start_line + 1,
                                                    start_pos + 1);
                                            pushBack(accept_length);
                                            pos = accept_pos;
                                            line = accept_line;
                                            return token;
                                        }
                                    case 18:
                                        {
                                            Token token = new18(
                                                    start_line + 1,
                                                    start_pos + 1);
                                            pushBack(accept_length);
                                            pos = accept_pos;
                                            line = accept_line;
                                            return token;
                                        }
                                    case 19:
                                        {
                                            Token token = new19(
                                                    start_line + 1,
                                                    start_pos + 1);
                                            pushBack(accept_length);
                                            pos = accept_pos;
                                            line = accept_line;
                                            return token;
                                        }
                                    case 20:
                                        {
                                            Token token = new20(
                                                    start_line + 1,
                                                    start_pos + 1);
                                            pushBack(accept_length);
                                            pos = accept_pos;
                                            line = accept_line;
                                            return token;
                                        }
                                    case 21:
                                        {
                                            Token token = new21(
                                                    start_line + 1,
                                                    start_pos + 1);
                                            pushBack(accept_length);
                                            pos = accept_pos;
                                            line = accept_line;
                                            return token;
                                        }
                                    case 22:
                                        {
                                            Token token = new22(
                                                    start_line + 1,
                                                    start_pos + 1);
                                            pushBack(accept_length);
                                            pos = accept_pos;
                                            line = accept_line;
                                            return token;
                                        }
                                    case 23:
                                        {
                                            Token token = new23(
                                                    start_line + 1,
                                                    start_pos + 1);
                                            pushBack(accept_length);
                                            pos = accept_pos;
                                            line = accept_line;
                                            return token;
                                        }
                                    case 24:
                                        {
                                            Token token = new24(
                                                    start_line + 1,
                                                    start_pos + 1);
                                            pushBack(accept_length);
                                            pos = accept_pos;
                                            line = accept_line;
                                            return token;
                                        }
                                    case 25:
                                        {
                                            Token token = new25(
                                                    start_line + 1,
                                                    start_pos + 1);
                                            pushBack(accept_length);
                                            pos = accept_pos;
                                            line = accept_line;
                                            return token;
                                        }
                                    case 26:
                                        {
                                            Token token = new26(
                                                    start_line + 1,
                                                    start_pos + 1);
                                            pushBack(accept_length);
                                            pos = accept_pos;
                                            line = accept_line;
                                            return token;
                                        }
                                    case 27:
                                        {
                                            Token token = new27(
                                                    start_line + 1,
                                                    start_pos + 1);
                                            pushBack(accept_length);
                                            pos = accept_pos;
                                            line = accept_line;
                                            return token;
                                        }
                                    case 28:
                                        {
                                            Token token = new28(
                                                    start_line + 1,
                                                    start_pos + 1);
                                            pushBack(accept_length);
                                            pos = accept_pos;
                                            line = accept_line;
                                            return token;
                                        }
                                    case 29:
                                        {
                                            Token token = new29(
                                                    start_line + 1,
                                                    start_pos + 1);
                                            pushBack(accept_length);
                                            pos = accept_pos;
                                            line = accept_line;
                                            return token;
                                        }
                                    case 30:
                                        {
                                            Token token = new30(
                                                    start_line + 1,
                                                    start_pos + 1);
                                            pushBack(accept_length);
                                            pos = accept_pos;
                                            line = accept_line;
                                            return token;
                                        }
                                    case 31:
                                        {
                                            Token token = new31(
                                                    start_line + 1,
                                                    start_pos + 1);
                                            pushBack(accept_length);
                                            pos = accept_pos;
                                            line = accept_line;
                                            return token;
                                        }
                                    case 32:
                                        {
                                            Token token = new32(
                                                    getText(accept_length),
                                                    start_line + 1,
                                                    start_pos + 1);
                                            pushBack(accept_length);
                                            pos = accept_pos;
                                            line = accept_line;
                                            return token;
                                        }
                                    case 33:
                                        {
                                            Token token = new33(
                                                    getText(accept_length),
                                                    start_line + 1,
                                                    start_pos + 1);
                                            pushBack(accept_length);
                                            pos = accept_pos;
                                            line = accept_line;
                                            return token;
                                        }
                                    case 34:
                                        {
                                            Token token = new34(
                                                    start_line + 1,
                                                    start_pos + 1);
                                            pushBack(accept_length);
                                            pos = accept_pos;
                                            line = accept_line;
                                            return token;
                                        }
                                    case 35:
                                        {
                                            Token token = new35(
                                                    start_line + 1,
                                                    start_pos + 1);
                                            pushBack(accept_length);
                                            pos = accept_pos;
                                            line = accept_line;
                                            return token;
                                        }
                                    case 36:
                                        {
                                            Token token = new36(
                                                    start_line + 1,
                                                    start_pos + 1);
                                            pushBack(accept_length);
                                            pos = accept_pos;
                                            line = accept_line;
                                            return token;
                                        }
                                    case 37:
                                        {
                                            Token token = new37(
                                                    start_line + 1,
                                                    start_pos + 1);
                                            pushBack(accept_length);
                                            pos = accept_pos;
                                            line = accept_line;
                                            return token;
                                        }
                                    case 38:
                                        {
                                            Token token = new38(
                                                    start_line + 1,
                                                    start_pos + 1);
                                            pushBack(accept_length);
                                            pos = accept_pos;
                                            line = accept_line;
                                            return token;
                                        }
                                    case 39:
                                        {
                                            Token token = new39(
                                                    start_line + 1,
                                                    start_pos + 1);
                                            pushBack(accept_length);
                                            pos = accept_pos;
                                            line = accept_line;
                                            return token;
                                        }
                                    case 40:
                                        {
                                            Token token = new40(
                                                    start_line + 1,
                                                    start_pos + 1);
                                            pushBack(accept_length);
                                            pos = accept_pos;
                                            line = accept_line;
                                            return token;
                                        }
                                    case 41:
                                        {
                                            Token token = new41(
                                                    start_line + 1,
                                                    start_pos + 1);
                                            pushBack(accept_length);
                                            pos = accept_pos;
                                            line = accept_line;
                                            return token;
                                        }
                                    case 42:
                                        {
                                            Token token = new42(
                                                    start_line + 1,
                                                    start_pos + 1);
                                            pushBack(accept_length);
                                            pos = accept_pos;
                                            line = accept_line;
                                            return token;
                                        }
                                    case 43:
                                        {
                                            Token token = new43(
                                                    start_line + 1,
                                                    start_pos + 1);
                                            pushBack(accept_length);
                                            pos = accept_pos;
                                            line = accept_line;
                                            return token;
                                        }
                                    case 44:
                                        {
                                            Token token = new44(
                                                    start_line + 1,
                                                    start_pos + 1);
                                            pushBack(accept_length);
                                            pos = accept_pos;
                                            line = accept_line;
                                            return token;
                                        }
                                    case 45:
                                        {
                                            Token token = new45(
                                                    start_line + 1,
                                                    start_pos + 1);
                                            pushBack(accept_length);
                                            pos = accept_pos;
                                            line = accept_line;
                                            return token;
                                        }
                                    case 46:
                                        {
                                            Token token = new46(
                                                    start_line + 1,
                                                    start_pos + 1);
                                            pushBack(accept_length);
                                            pos = accept_pos;
                                            line = accept_line;
                                            return token;
                                        }
                                    case 47:
                                        {
                                            Token token = new47(
                                                    getText(accept_length),
                                                    start_line + 1,
                                                    start_pos + 1);
                                            pushBack(accept_length);
                                            pos = accept_pos;
                                            line = accept_line;
                                            return token;
                                        }
                                    case 48:
                                        {
                                            Token token = new48(
                                                    getText(accept_length),
                                                    start_line + 1,
                                                    start_pos + 1);
                                            pushBack(accept_length);
                                            pos = accept_pos;
                                            line = accept_line;
                                            return token;
                                        }
                                    }
                            }
                        else
                            {
                                if (text.length() > 0)
                                    {
                                        throw new LexerException(
                                                "[" + (start_line + 1) + "," + (start_pos + 1) + "]" +
                                                " Unknown token: " + text);
                                    }
                                else
                                    {
                                        EOF token = new EOF(
                                                start_line + 1,
                                                start_pos + 1);
                                        return token;
                                    }
                            }
                    }
            }
    }

    Token new0(int line, int pos) { return new TModule(line, pos); }
    Token new1(int line, int pos) { return new TType(line, pos); }
    Token new2(int line, int pos) { return new TIs(line, pos); }
    Token new3(int line, int pos) { return new TSensor(line, pos); }
    Token new4(int line, int pos) { return new TUses(line, pos); }
    Token new5(int line, int pos) { return new TActuator(line, pos); }
    Token new6(int line, int pos) { return new TOutput(line, pos); }
    Token new7(int line, int pos) { return new TTask(line, pos); }
    Token new8(int line, int pos) { return new TSchedule(line, pos); }
    Token new9(int line, int pos) { return new TState(line, pos); }
    Token new10(int line, int pos) { return new TDriver(line, pos); }
    Token new11(int line, int pos) { return new TIf(line, pos); }
    Token new12(int line, int pos) { return new TThen(line, pos); }
    Token new13(int line, int pos) { return new TStart(line, pos); }
    Token new14(int line, int pos) { return new TMode(line, pos); }
    Token new15(int line, int pos) { return new TPeriod(line, pos); }
    Token new16(int line, int pos) { return new TActfreq(line, pos); }
    Token new17(int line, int pos) { return new TDo(line, pos); }
    Token new18(int line, int pos) { return new TExitfreq(line, pos); }
    Token new19(int line, int pos) { return new TTaskfreq(line, pos); }
    Token new20(int line, int pos) { return new THost(line, pos); }
    Token new21(int line, int pos) { return new TAddress(line, pos); }
    Token new22(int line, int pos) { return new TPriorities(line, pos); }
    Token new23(int line, int pos) { return new TNetwork(line, pos); }
    Token new24(int line, int pos) { return new TConnects(line, pos); }
    Token new25(int line, int pos) { return new TSlots(line, pos); }
    Token new26(int line, int pos) { return new TPush(line, pos); }
    Token new27(int line, int pos) { return new TFrom(line, pos); }
    Token new28(int line, int pos) { return new TTo(line, pos); }
    Token new29(int line, int pos) { return new TIn(line, pos); }
    Token new30(int line, int pos) { return new TPriority(line, pos); }
    Token new31(int line, int pos) { return new TWcet(line, pos); }
    Token new32(String text, int line, int pos) { return new TIdent(text, line, pos); }
    Token new33(String text, int line, int pos) { return new TNumber(text, line, pos); }
    Token new34(int line, int pos) { return new TSemicolon(line, pos); }
    Token new35(int line, int pos) { return new TComma(line, pos); }
    Token new36(int line, int pos) { return new TDot(line, pos); }
    Token new37(int line, int pos) { return new TColon(line, pos); }
    Token new38(int line, int pos) { return new TGreaterThan(line, pos); }
    Token new39(int line, int pos) { return new TLessOrEqual(line, pos); }
    Token new40(int line, int pos) { return new TAssign(line, pos); }
    Token new41(int line, int pos) { return new TLPar(line, pos); }
    Token new42(int line, int pos) { return new TRPar(line, pos); }
    Token new43(int line, int pos) { return new TLBrace(line, pos); }
    Token new44(int line, int pos) { return new TRBrace(line, pos); }
    Token new45(int line, int pos) { return new TLBracket(line, pos); }
    Token new46(int line, int pos) { return new TRBracket(line, pos); }
    Token new47(String text, int line, int pos) { return new TBlank(text, line, pos); }
    Token new48(String text, int line, int pos) { return new TComment(text, line, pos); }

    private int getChar() throws IOException
    {
        if (eof)
            {
                return -1;
            }

        int result = in.read();

        if (result == -1)
            {
                eof = true;
            }

        return result;
    }

    private void pushBack(int acceptLength) throws IOException
    {
        int length = text.length();
        for (int i = length - 1; i >= acceptLength; i--)
            {
                eof = false;

                in.unread(text.charAt(i));
            }
    }

    protected void unread(Token token) throws IOException
    {
        String text = token.getText();
        int length = text.length();

        for (int i = length - 1; i >= 0; i--)
            {
                eof = false;

                in.unread(text.charAt(i));
            }

        pos = token.getPos() - 1;
        line = token.getLine() - 1;
    }

    private String getText(int acceptLength)
    {
        StringBuffer s = new StringBuffer(acceptLength);
        for (int i = 0; i < acceptLength; i++)
            {
                s.append(text.charAt(i));
            }

        return s.toString();
    }

    private static int[][][][] gotoTable;
    /*  {
        { // INITIAL
        {{9, 9, 1}, {10, 10, 2}, {13, 13, 3}, {32, 32, 4}, {40, 40, 5}, {41, 41, 6}, {44, 44, 7}, {46, 46, 8}, {47, 47, 9}, {48, 57, 10}, {58, 58, 11}, {59, 59, 12}, {60, 60, 13}, {62, 62, 14}, {65, 90, 15}, {91, 91, 16}, {93, 93, 17}, {95, 95, 18}, {97, 97, 19}, {98, 98, 20}, {99, 99, 21}, {100, 100, 22}, {101, 101, 23}, {102, 102, 24}, {103, 103, 20}, {104, 104, 25}, {105, 105, 26}, {106, 108, 20}, {109, 109, 27}, {110, 110, 28}, {111, 111, 29}, {112, 112, 30}, {113, 114, 20}, {115, 115, 31}, {116, 116, 32}, {117, 117, 33}, {118, 118, 20}, {119, 119, 34}, {120, 122, 20}, {123, 123, 35}, {125, 125, 36}, },
        {{9, 32, -2}, },
        {{9, 32, -2}, },
        {{9, 9, 1}, {10, 10, 37}, {13, 32, -2}, },
        {{9, 32, -2}, },
        {},
        {},
        {},
        {},
        {{42, 42, 38}, {47, 47, 39}, },
        {{48, 57, 10}, },
        {{61, 61, 40}, },
        {},
        {{61, 61, 41}, },
        {},
        {{46, 46, 42}, {48, 57, 43}, {65, 90, 44}, {95, 95, 45}, {97, 122, 46}, },
        {},
        {},
        {{46, 122, -17}, },
        {{46, 95, -17}, {97, 98, 46}, {99, 99, 47}, {100, 100, 48}, {101, 122, 46}, },
        {{46, 122, -17}, },
        {{46, 95, -17}, {97, 110, 46}, {111, 111, 49}, {112, 122, 46}, },
        {{46, 110, -23}, {111, 111, 50}, {112, 113, 46}, {114, 114, 51}, {115, 122, 46}, },
        {{46, 95, -17}, {97, 119, 46}, {120, 120, 52}, {121, 122, 46}, },
        {{46, 95, -17}, {97, 113, 46}, {114, 114, 53}, {115, 122, 46}, },
        {{46, 110, -23}, {111, 111, 54}, {112, 122, 46}, },
        {{46, 95, -17}, {97, 101, 46}, {102, 102, 55}, {103, 109, 46}, {110, 110, 56}, {111, 114, 46}, {115, 115, 57}, {116, 122, 46}, },
        {{46, 110, -23}, {111, 111, 58}, {112, 122, 46}, },
        {{46, 95, -17}, {97, 100, 46}, {101, 101, 59}, {102, 122, 46}, },
        {{46, 95, -17}, {97, 116, 46}, {117, 117, 60}, {118, 122, 46}, },
        {{46, 100, -30}, {101, 101, 61}, {102, 113, 46}, {114, 114, 62}, {115, 116, 46}, {117, 117, 63}, {118, 122, 46}, },
        {{46, 98, -21}, {99, 99, 64}, {100, 100, 46}, {101, 101, 65}, {102, 107, 46}, {108, 108, 66}, {109, 115, 46}, {116, 116, 67}, {117, 122, 46}, },
        {{46, 95, -17}, {97, 97, 68}, {98, 103, 46}, {104, 104, 69}, {105, 110, 46}, {111, 111, 70}, {112, 120, 46}, {121, 121, 71}, {122, 122, 46}, },
        {{46, 95, -17}, {97, 114, 46}, {115, 115, 72}, {116, 122, 46}, },
        {{46, 98, -21}, {99, 99, 73}, {100, 122, 46}, },
        {},
        {},
        {{9, 32, -2}, },
        {{0, 41, 74}, {42, 42, 75}, {43, 65535, 74}, },
        {{0, 9, 76}, {10, 10, 77}, {11, 12, 76}, {13, 13, 78}, {14, 65535, 76}, },
        {},
        {},
        {{65, 90, 79}, {95, 95, 80}, {97, 122, 81}, },
        {{46, 122, -17}, },
        {{46, 122, -17}, },
        {{46, 122, -17}, },
        {{46, 122, -17}, },
        {{46, 95, -17}, {97, 115, 46}, {116, 116, 82}, {117, 122, 46}, },
        {{46, 95, -17}, {97, 99, 46}, {100, 100, 83}, {101, 122, 46}, },
        {{46, 95, -17}, {97, 109, 46}, {110, 110, 84}, {111, 122, 46}, },
        {{46, 122, -17}, },
        {{46, 95, -17}, {97, 104, 46}, {105, 105, 85}, {106, 122, 46}, },
        {{46, 104, -53}, {105, 105, 86}, {106, 122, 46}, },
        {{46, 110, -23}, {111, 111, 87}, {112, 122, 46}, },
        {{46, 114, -35}, {115, 115, 88}, {116, 122, 46}, },
        {{46, 122, -17}, },
        {{46, 122, -17}, },
        {{46, 122, -17}, },
        {{46, 99, -50}, {100, 100, 89}, {101, 122, 46}, },
        {{46, 115, -49}, {116, 116, 90}, {117, 122, 46}, },
        {{46, 115, -49}, {116, 116, 91}, {117, 122, 46}, },
        {{46, 113, -26}, {114, 114, 92}, {115, 122, 46}, },
        {{46, 104, -53}, {105, 105, 93}, {106, 122, 46}, },
        {{46, 114, -35}, {115, 115, 94}, {116, 122, 46}, },
        {{46, 95, -17}, {97, 103, 46}, {104, 104, 95}, {105, 122, 46}, },
        {{46, 109, -51}, {110, 110, 96}, {111, 122, 46}, },
        {{46, 110, -23}, {111, 111, 97}, {112, 122, 46}, },
        {{46, 95, -17}, {97, 97, 98}, {98, 122, 46}, },
        {{46, 114, -35}, {115, 115, 99}, {116, 122, 46}, },
        {{46, 100, -30}, {101, 101, 100}, {102, 122, 46}, },
        {{46, 122, -17}, },
        {{46, 95, -17}, {97, 111, 46}, {112, 112, 101}, {113, 122, 46}, },
        {{46, 100, -30}, {101, 101, 102}, {102, 122, 46}, },
        {{46, 100, -30}, {101, 101, 103}, {102, 122, 46}, },
        {{0, 65535, -40}, },
        {{0, 41, 104}, {42, 42, 75}, {43, 46, 104}, {47, 47, 105}, {48, 65535, 104}, },
        {{0, 65535, -41}, },
        {},
        {{10, 10, 106}, },
        {{46, 46, 42}, {48, 57, 107}, {65, 90, 108}, {95, 95, 109}, {97, 122, 110}, },
        {{46, 122, -81}, },
        {{46, 122, -81}, },
        {{46, 101, -28}, {102, 102, 111}, {103, 116, 46}, {117, 117, 112}, {118, 122, 46}, },
        {{46, 113, -26}, {114, 114, 113}, {115, 122, 46}, },
        {{46, 109, -51}, {110, 110, 114}, {111, 122, 46}, },
        {{46, 95, -17}, {97, 117, 46}, {118, 118, 115}, {119, 122, 46}, },
        {{46, 115, -49}, {116, 116, 116}, {117, 122, 46}, },
        {{46, 95, -17}, {97, 108, 46}, {109, 109, 117}, {110, 122, 46}, },
        {{46, 115, -49}, {116, 116, 118}, {117, 122, 46}, },
        {{46, 100, -30}, {101, 101, 119}, {102, 116, 46}, {117, 117, 120}, {118, 122, 46}, },
        {{46, 95, -17}, {97, 118, 46}, {119, 119, 121}, {120, 122, 46}, },
        {{46, 111, -73}, {112, 112, 122}, {113, 122, 46}, },
        {{46, 104, -53}, {105, 105, 123}, {106, 122, 46}, },
        {{46, 110, -23}, {111, 111, 124}, {112, 122, 46}, },
        {{46, 103, -66}, {104, 104, 125}, {105, 122, 46}, },
        {{46, 100, -30}, {101, 101, 126}, {102, 122, 46}, },
        {{46, 114, -35}, {115, 115, 127}, {116, 122, 46}, },
        {{46, 115, -49}, {116, 116, 128}, {117, 122, 46}, },
        {{46, 113, -26}, {114, 114, 129}, {115, 115, 46}, {116, 116, 130}, {117, 122, 46}, },
        {{46, 95, -17}, {97, 106, 46}, {107, 107, 131}, {108, 122, 46}, },
        {{46, 109, -51}, {110, 110, 132}, {111, 122, 46}, },
        {{46, 100, -30}, {101, 101, 133}, {102, 122, 46}, },
        {{46, 114, -35}, {115, 115, 134}, {116, 122, 46}, },
        {{46, 115, -49}, {116, 116, 135}, {117, 122, 46}, },
        {{0, 41, 136}, {42, 42, 137}, {43, 65535, 136}, },
        {},
        {},
        {{46, 122, -81}, },
        {{46, 122, -81}, },
        {{46, 122, -81}, },
        {{46, 122, -81}, },
        {{46, 113, -26}, {114, 114, 138}, {115, 122, 46}, },
        {{46, 95, -17}, {97, 97, 139}, {98, 122, 46}, },
        {{46, 100, -30}, {101, 101, 140}, {102, 122, 46}, },
        {{46, 100, -30}, {101, 101, 141}, {102, 122, 46}, },
        {{46, 100, -30}, {101, 101, 142}, {102, 122, 46}, },
        {{46, 101, -28}, {102, 102, 143}, {103, 122, 46}, },
        {{46, 122, -17}, },
        {{46, 122, -17}, },
        {{46, 122, -17}, },
        {{46, 95, -17}, {97, 107, 46}, {108, 108, 144}, {109, 122, 46}, },
        {{46, 110, -23}, {111, 111, 145}, {112, 122, 46}, },
        {{46, 116, -31}, {117, 117, 146}, {118, 122, 46}, },
        {{46, 110, -23}, {111, 111, 147}, {112, 122, 46}, },
        {{46, 113, -26}, {114, 114, 148}, {115, 122, 46}, },
        {{46, 122, -17}, },
        {{46, 99, -50}, {100, 100, 149}, {101, 122, 46}, },
        {{46, 110, -23}, {111, 111, 150}, {112, 122, 46}, },
        {{46, 114, -35}, {115, 115, 151}, {116, 122, 46}, },
        {{46, 115, -49}, {116, 116, 152}, {117, 122, 46}, },
        {{46, 100, -30}, {101, 101, 153}, {102, 122, 46}, },
        {{46, 101, -28}, {102, 102, 154}, {103, 122, 46}, },
        {{46, 122, -17}, },
        {{46, 122, -17}, },
        {{46, 122, -17}, },
        {{46, 122, -17}, },
        {{0, 65535, -106}, },
        {{0, 41, 104}, {42, 42, 137}, {43, 65535, -77}, },
        {{46, 100, -30}, {101, 101, 155}, {102, 122, 46}, },
        {{46, 115, -49}, {116, 116, 156}, {117, 122, 46}, },
        {{46, 114, -35}, {115, 115, 157}, {116, 122, 46}, },
        {{46, 98, -21}, {99, 99, 158}, {100, 122, 46}, },
        {{46, 113, -26}, {114, 114, 159}, {115, 122, 46}, },
        {{46, 113, -26}, {114, 114, 160}, {115, 122, 46}, },
        {{46, 100, -30}, {101, 101, 161}, {102, 122, 46}, },
        {{46, 113, -26}, {114, 114, 162}, {115, 122, 46}, },
        {{46, 115, -49}, {116, 116, 163}, {117, 122, 46}, },
        {{46, 99, -50}, {100, 100, 164}, {101, 122, 46}, },
        {{46, 104, -53}, {105, 105, 165}, {106, 122, 46}, },
        {{46, 116, -31}, {117, 117, 166}, {118, 122, 46}, },
        {{46, 113, -26}, {114, 114, 167}, {115, 122, 46}, },
        {{46, 122, -17}, },
        {{46, 122, -17}, },
        {{46, 122, -17}, },
        {{46, 113, -26}, {114, 114, 168}, {115, 122, 46}, },
        {{46, 95, -17}, {97, 112, 46}, {113, 113, 169}, {114, 122, 46}, },
        {{46, 110, -23}, {111, 111, 170}, {112, 122, 46}, },
        {{46, 114, -35}, {115, 115, 171}, {116, 122, 46}, },
        {{46, 115, -49}, {116, 116, 172}, {117, 122, 46}, },
        {{46, 122, -17}, },
        {{46, 100, -30}, {101, 101, 173}, {102, 122, 46}, },
        {{46, 122, -17}, },
        {{46, 106, -101}, {107, 107, 174}, {108, 122, 46}, },
        {{46, 122, -17}, },
        {{46, 122, -17}, },
        {{46, 115, -49}, {116, 116, 175}, {117, 122, 46}, },
        {{46, 107, -122}, {108, 108, 176}, {109, 122, 46}, },
        {{46, 122, -17}, },
        {{46, 100, -30}, {101, 101, 177}, {102, 122, 46}, },
        {{46, 122, -17}, },
        {{46, 113, -26}, {114, 114, 178}, {115, 122, 46}, },
        {{46, 122, -17}, },
        {{46, 114, -35}, {115, 115, 179}, {116, 122, 46}, },
        {{46, 112, -157}, {113, 113, 180}, {114, 122, 46}, },
        {{46, 122, -17}, },
        {{46, 104, -53}, {105, 105, 181}, {106, 120, 46}, {121, 121, 182}, {122, 122, 46}, },
        {{46, 100, -30}, {101, 101, 183}, {102, 122, 46}, },
        {{46, 112, -157}, {113, 113, 184}, {114, 122, 46}, },
        {{46, 122, -17}, },
        {{46, 122, -17}, },
        {{46, 122, -17}, },
        {{46, 100, -30}, {101, 101, 185}, {102, 122, 46}, },
        {{46, 122, -17}, },
        {{46, 122, -17}, },
        {{46, 122, -17}, },
        {{46, 114, -35}, {115, 115, 186}, {116, 122, 46}, },
        {{46, 122, -17}, },
        }
        };*/

    private static int[][] accept;
    /*  {
    // INITIAL
    {-1, 47, 47, 47, 47, 41, 42, 35, 36, -1, 33, 37, 34, -1, 38, 32, 45, 46, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 43, 44, 47, -1, -1, 40, 39, -1, 32, 32, 32, 32, 32, 32, 32, 17, 32, 32, 32, 32, 11, 29, 2, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 28, 32, 32, 32, -1, -1, -1, 48, 48, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, -1, 48, 48, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 27, 20, 14, 32, 32, 32, 32, 32, 26, 32, 32, 32, 32, 32, 7, 12, 1, 4, 31, -1, -1, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 25, 13, 9, 32, 32, 32, 32, 32, 10, 32, 0, 32, 6, 15, 32, 32, 3, 32, 16, 32, 21, 32, 32, 23, 32, 32, 32, 5, 24, 18, 32, 30, 8, 19, 32, 22, },

    };*/

    public static class State
    {
        public final static State INITIAL = new State(0);

        private int id;

        private State(int id)
        {
            this.id = id;
        }

        public int id()
        {
            return id;
        }
    }
}
